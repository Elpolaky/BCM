
BCM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a62  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000034  00800060  00000a62  00000af6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  00800094  00800094  00000b2a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b2a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000b5c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000308  00000000  00000000  00000b98  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002a7a  00000000  00000000  00000ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001119  00000000  00000000  0000391a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001991  00000000  00000000  00004a33  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000740  00000000  00000000  000063c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001394  00000000  00000000  00006b04  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001ec5  00000000  00000000  00007e98  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000250  00000000  00000000  00009d5d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 42 02 	jmp	0x484	; 0x484 <__vector_1>
   8:	0c 94 6b 02 	jmp	0x4d6	; 0x4d6 <__vector_2>
   c:	0c 94 94 02 	jmp	0x528	; 0x528 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 e6 02 	jmp	0x5cc	; 0x5cc <__vector_5>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 bd 02 	jmp	0x57a	; 0x57a <__vector_12>
  34:	0c 94 a8 03 	jmp	0x750	; 0x750 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 d8 03 	jmp	0x7b0	; 0x7b0 <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e6       	ldi	r30, 0x62	; 98
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 39       	cpi	r26, 0x94	; 148
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 e9       	ldi	r26, 0x94	; 148
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 3a       	cpi	r26, 0xA8	; 168
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 9e 00 	call	0x13c	; 0x13c <main>
  8a:	0c 94 2f 05 	jmp	0xa5e	; 0xa5e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <app_Init>:
                                   FUNCTION IMPLMENTATION
************************************************************************************************************************/


void app_Init(void){
	sei();
  92:	78 94       	sei
	bcm_init(&str_bcm_init_t);
  94:	8b e8       	ldi	r24, 0x8B	; 139
  96:	90 e0       	ldi	r25, 0x00	; 0
  98:	0e 94 11 04 	call	0x822	; 0x822 <bcm_init>
	bcm_send_n(&str_bcm_init_t,a, y);
  9c:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <y>
  a0:	65 e7       	ldi	r22, 0x75	; 117
  a2:	70 e0       	ldi	r23, 0x00	; 0
  a4:	8b e8       	ldi	r24, 0x8B	; 139
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	0e 94 22 04 	call	0x844	; 0x844 <bcm_send_n>
	bcm_send_n(&str_bcm_init_t,b, x);
  ac:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <x>
  b0:	6e e6       	ldi	r22, 0x6E	; 110
  b2:	70 e0       	ldi	r23, 0x00	; 0
  b4:	8b e8       	ldi	r24, 0x8B	; 139
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	0e 94 22 04 	call	0x844	; 0x844 <bcm_send_n>
	bcm_send_n(&str_bcm_init_t,c, z);
  bc:	40 91 61 00 	lds	r20, 0x0061	; 0x800061 <z>
  c0:	65 e6       	ldi	r22, 0x65	; 101
  c2:	70 e0       	ldi	r23, 0x00	; 0
  c4:	8b e8       	ldi	r24, 0x8B	; 139
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	0e 94 22 04 	call	0x844	; 0x844 <bcm_send_n>
	bcm_send_n(&str_bcm_init_t,d, o);
  cc:	40 91 60 00 	lds	r20, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  d0:	64 e6       	ldi	r22, 0x64	; 100
  d2:	70 e0       	ldi	r23, 0x00	; 0
  d4:	8b e8       	ldi	r24, 0x8B	; 139
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	0e 94 22 04 	call	0x844	; 0x844 <bcm_send_n>
	LED_INIT(pina0 );
  dc:	80 e0       	ldi	r24, 0x00	; 0
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	0e 94 8c 00 	call	0x118	; 0x118 <LED_INIT>
	LED_INIT(pina1 );
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	0e 94 8c 00 	call	0x118	; 0x118 <LED_INIT>
  ec:	08 95       	ret

000000ee <app_Start>:

}
	
void app_Start(void){
  ee:	cf 93       	push	r28
	 uint8_t u8_dispatcher_status =   bcm_disbatcher(&str_bcm_init_t,RECEVING_FIRST);
  f0:	62 e0       	ldi	r22, 0x02	; 2
  f2:	8b e8       	ldi	r24, 0x8B	; 139
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	0e 94 80 04 	call	0x900	; 0x900 <bcm_disbatcher>
  fa:	c8 2f       	mov	r28, r24
	  if (u8_dispatcher_status == BUFFER_SENT_OK)
  fc:	8a 30       	cpi	r24, 0x0A	; 10
  fe:	21 f4       	brne	.+8      	; 0x108 <app_Start+0x1a>
	  {
		LED_ON(pina0);
 100:	80 e0       	ldi	r24, 0x00	; 0
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	0e 94 95 00 	call	0x12a	; 0x12a <LED_ON>
	  }
	  if (u8_dispatcher_status == BUFFER_RECEIVED_OK)
 108:	cb 30       	cpi	r28, 0x0B	; 11
 10a:	21 f4       	brne	.+8      	; 0x114 <app_Start+0x26>
	  {
		LED_ON(pina1);
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	0e 94 95 00 	call	0x12a	; 0x12a <LED_ON>
	  }
	
}
 114:	cf 91       	pop	r28
 116:	08 95       	ret

00000118 <LED_INIT>:
 118:	88 32       	cpi	r24, 0x28	; 40
 11a:	28 f4       	brcc	.+10     	; 0x126 <LED_INIT+0xe>
 11c:	60 e0       	ldi	r22, 0x00	; 0
 11e:	0e 94 a3 00 	call	0x146	; 0x146 <DIO_INITPIN>
 122:	80 e0       	ldi	r24, 0x00	; 0
 124:	08 95       	ret
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	08 95       	ret

0000012a <LED_ON>:
 12a:	88 32       	cpi	r24, 0x28	; 40
 12c:	28 f4       	brcc	.+10     	; 0x138 <LED_ON+0xe>
 12e:	61 e0       	ldi	r22, 0x01	; 1
 130:	0e 94 a5 01 	call	0x34a	; 0x34a <DIO_WRITEPIN>
 134:	80 e0       	ldi	r24, 0x00	; 0
 136:	08 95       	ret
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	08 95       	ret

0000013c <main>:
#include "APP/APP.h"
#define F_CPU 8000000UL 
int main(void)
{
	
 app_Init();
 13c:	0e 94 49 00 	call	0x92	; 0x92 <app_Init>
   while (1)
   {
	
		app_Start();
 140:	0e 94 77 00 	call	0xee	; 0xee <app_Start>
 144:	fd cf       	rjmp	.-6      	; 0x140 <main+0x4>

00000146 <DIO_INITPIN>:
 146:	98 2f       	mov	r25, r24
 148:	96 95       	lsr	r25
 14a:	96 95       	lsr	r25
 14c:	96 95       	lsr	r25
 14e:	87 70       	andi	r24, 0x07	; 7
 150:	95 30       	cpi	r25, 0x05	; 5
 152:	08 f0       	brcs	.+2      	; 0x156 <DIO_INITPIN+0x10>
 154:	f8 c0       	rjmp	.+496    	; 0x346 <DIO_INITPIN+0x200>
 156:	61 30       	cpi	r22, 0x01	; 1
 158:	31 f0       	breq	.+12     	; 0x166 <DIO_INITPIN+0x20>
 15a:	08 f4       	brcc	.+2      	; 0x15e <DIO_INITPIN+0x18>
 15c:	a4 c0       	rjmp	.+328    	; 0x2a6 <DIO_INITPIN+0x160>
 15e:	62 30       	cpi	r22, 0x02	; 2
 160:	09 f4       	brne	.+2      	; 0x164 <DIO_INITPIN+0x1e>
 162:	51 c0       	rjmp	.+162    	; 0x206 <DIO_INITPIN+0xc0>
 164:	ef c0       	rjmp	.+478    	; 0x344 <DIO_INITPIN+0x1fe>
 166:	91 30       	cpi	r25, 0x01	; 1
 168:	c1 f0       	breq	.+48     	; 0x19a <DIO_INITPIN+0x54>
 16a:	28 f0       	brcs	.+10     	; 0x176 <DIO_INITPIN+0x30>
 16c:	92 30       	cpi	r25, 0x02	; 2
 16e:	39 f1       	breq	.+78     	; 0x1be <DIO_INITPIN+0x78>
 170:	93 30       	cpi	r25, 0x03	; 3
 172:	b9 f1       	breq	.+110    	; 0x1e2 <DIO_INITPIN+0x9c>
 174:	e7 c0       	rjmp	.+462    	; 0x344 <DIO_INITPIN+0x1fe>
 176:	4a b3       	in	r20, 0x1a	; 26
 178:	21 e0       	ldi	r18, 0x01	; 1
 17a:	30 e0       	ldi	r19, 0x00	; 0
 17c:	b9 01       	movw	r22, r18
 17e:	02 c0       	rjmp	.+4      	; 0x184 <DIO_INITPIN+0x3e>
 180:	66 0f       	add	r22, r22
 182:	77 1f       	adc	r23, r23
 184:	8a 95       	dec	r24
 186:	e2 f7       	brpl	.-8      	; 0x180 <DIO_INITPIN+0x3a>
 188:	cb 01       	movw	r24, r22
 18a:	80 95       	com	r24
 18c:	94 2f       	mov	r25, r20
 18e:	98 23       	and	r25, r24
 190:	9a bb       	out	0x1a, r25	; 26
 192:	9b b3       	in	r25, 0x1b	; 27
 194:	89 23       	and	r24, r25
 196:	8b bb       	out	0x1b, r24	; 27
 198:	d5 c0       	rjmp	.+426    	; 0x344 <DIO_INITPIN+0x1fe>
 19a:	47 b3       	in	r20, 0x17	; 23
 19c:	21 e0       	ldi	r18, 0x01	; 1
 19e:	30 e0       	ldi	r19, 0x00	; 0
 1a0:	b9 01       	movw	r22, r18
 1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <DIO_INITPIN+0x62>
 1a4:	66 0f       	add	r22, r22
 1a6:	77 1f       	adc	r23, r23
 1a8:	8a 95       	dec	r24
 1aa:	e2 f7       	brpl	.-8      	; 0x1a4 <DIO_INITPIN+0x5e>
 1ac:	cb 01       	movw	r24, r22
 1ae:	80 95       	com	r24
 1b0:	94 2f       	mov	r25, r20
 1b2:	98 23       	and	r25, r24
 1b4:	97 bb       	out	0x17, r25	; 23
 1b6:	98 b3       	in	r25, 0x18	; 24
 1b8:	89 23       	and	r24, r25
 1ba:	88 bb       	out	0x18, r24	; 24
 1bc:	c3 c0       	rjmp	.+390    	; 0x344 <DIO_INITPIN+0x1fe>
 1be:	44 b3       	in	r20, 0x14	; 20
 1c0:	21 e0       	ldi	r18, 0x01	; 1
 1c2:	30 e0       	ldi	r19, 0x00	; 0
 1c4:	b9 01       	movw	r22, r18
 1c6:	02 c0       	rjmp	.+4      	; 0x1cc <DIO_INITPIN+0x86>
 1c8:	66 0f       	add	r22, r22
 1ca:	77 1f       	adc	r23, r23
 1cc:	8a 95       	dec	r24
 1ce:	e2 f7       	brpl	.-8      	; 0x1c8 <DIO_INITPIN+0x82>
 1d0:	cb 01       	movw	r24, r22
 1d2:	80 95       	com	r24
 1d4:	94 2f       	mov	r25, r20
 1d6:	98 23       	and	r25, r24
 1d8:	94 bb       	out	0x14, r25	; 20
 1da:	95 b3       	in	r25, 0x15	; 21
 1dc:	89 23       	and	r24, r25
 1de:	85 bb       	out	0x15, r24	; 21
 1e0:	b1 c0       	rjmp	.+354    	; 0x344 <DIO_INITPIN+0x1fe>
 1e2:	41 b3       	in	r20, 0x11	; 17
 1e4:	21 e0       	ldi	r18, 0x01	; 1
 1e6:	30 e0       	ldi	r19, 0x00	; 0
 1e8:	b9 01       	movw	r22, r18
 1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <DIO_INITPIN+0xaa>
 1ec:	66 0f       	add	r22, r22
 1ee:	77 1f       	adc	r23, r23
 1f0:	8a 95       	dec	r24
 1f2:	e2 f7       	brpl	.-8      	; 0x1ec <DIO_INITPIN+0xa6>
 1f4:	cb 01       	movw	r24, r22
 1f6:	80 95       	com	r24
 1f8:	94 2f       	mov	r25, r20
 1fa:	98 23       	and	r25, r24
 1fc:	91 bb       	out	0x11, r25	; 17
 1fe:	92 b3       	in	r25, 0x12	; 18
 200:	89 23       	and	r24, r25
 202:	82 bb       	out	0x12, r24	; 18
 204:	9f c0       	rjmp	.+318    	; 0x344 <DIO_INITPIN+0x1fe>
 206:	91 30       	cpi	r25, 0x01	; 1
 208:	c1 f0       	breq	.+48     	; 0x23a <DIO_INITPIN+0xf4>
 20a:	28 f0       	brcs	.+10     	; 0x216 <DIO_INITPIN+0xd0>
 20c:	92 30       	cpi	r25, 0x02	; 2
 20e:	39 f1       	breq	.+78     	; 0x25e <DIO_INITPIN+0x118>
 210:	93 30       	cpi	r25, 0x03	; 3
 212:	b9 f1       	breq	.+110    	; 0x282 <DIO_INITPIN+0x13c>
 214:	97 c0       	rjmp	.+302    	; 0x344 <DIO_INITPIN+0x1fe>
 216:	4a b3       	in	r20, 0x1a	; 26
 218:	21 e0       	ldi	r18, 0x01	; 1
 21a:	30 e0       	ldi	r19, 0x00	; 0
 21c:	b9 01       	movw	r22, r18
 21e:	02 c0       	rjmp	.+4      	; 0x224 <DIO_INITPIN+0xde>
 220:	66 0f       	add	r22, r22
 222:	77 1f       	adc	r23, r23
 224:	8a 95       	dec	r24
 226:	e2 f7       	brpl	.-8      	; 0x220 <DIO_INITPIN+0xda>
 228:	cb 01       	movw	r24, r22
 22a:	96 2f       	mov	r25, r22
 22c:	90 95       	com	r25
 22e:	94 23       	and	r25, r20
 230:	9a bb       	out	0x1a, r25	; 26
 232:	9b b3       	in	r25, 0x1b	; 27
 234:	89 2b       	or	r24, r25
 236:	8b bb       	out	0x1b, r24	; 27
 238:	85 c0       	rjmp	.+266    	; 0x344 <DIO_INITPIN+0x1fe>
 23a:	47 b3       	in	r20, 0x17	; 23
 23c:	21 e0       	ldi	r18, 0x01	; 1
 23e:	30 e0       	ldi	r19, 0x00	; 0
 240:	b9 01       	movw	r22, r18
 242:	02 c0       	rjmp	.+4      	; 0x248 <DIO_INITPIN+0x102>
 244:	66 0f       	add	r22, r22
 246:	77 1f       	adc	r23, r23
 248:	8a 95       	dec	r24
 24a:	e2 f7       	brpl	.-8      	; 0x244 <DIO_INITPIN+0xfe>
 24c:	cb 01       	movw	r24, r22
 24e:	96 2f       	mov	r25, r22
 250:	90 95       	com	r25
 252:	94 23       	and	r25, r20
 254:	97 bb       	out	0x17, r25	; 23
 256:	98 b3       	in	r25, 0x18	; 24
 258:	89 2b       	or	r24, r25
 25a:	88 bb       	out	0x18, r24	; 24
 25c:	73 c0       	rjmp	.+230    	; 0x344 <DIO_INITPIN+0x1fe>
 25e:	44 b3       	in	r20, 0x14	; 20
 260:	21 e0       	ldi	r18, 0x01	; 1
 262:	30 e0       	ldi	r19, 0x00	; 0
 264:	b9 01       	movw	r22, r18
 266:	02 c0       	rjmp	.+4      	; 0x26c <DIO_INITPIN+0x126>
 268:	66 0f       	add	r22, r22
 26a:	77 1f       	adc	r23, r23
 26c:	8a 95       	dec	r24
 26e:	e2 f7       	brpl	.-8      	; 0x268 <DIO_INITPIN+0x122>
 270:	cb 01       	movw	r24, r22
 272:	96 2f       	mov	r25, r22
 274:	90 95       	com	r25
 276:	94 23       	and	r25, r20
 278:	94 bb       	out	0x14, r25	; 20
 27a:	95 b3       	in	r25, 0x15	; 21
 27c:	89 2b       	or	r24, r25
 27e:	85 bb       	out	0x15, r24	; 21
 280:	61 c0       	rjmp	.+194    	; 0x344 <DIO_INITPIN+0x1fe>
 282:	41 b3       	in	r20, 0x11	; 17
 284:	21 e0       	ldi	r18, 0x01	; 1
 286:	30 e0       	ldi	r19, 0x00	; 0
 288:	b9 01       	movw	r22, r18
 28a:	02 c0       	rjmp	.+4      	; 0x290 <DIO_INITPIN+0x14a>
 28c:	66 0f       	add	r22, r22
 28e:	77 1f       	adc	r23, r23
 290:	8a 95       	dec	r24
 292:	e2 f7       	brpl	.-8      	; 0x28c <DIO_INITPIN+0x146>
 294:	cb 01       	movw	r24, r22
 296:	96 2f       	mov	r25, r22
 298:	90 95       	com	r25
 29a:	94 23       	and	r25, r20
 29c:	91 bb       	out	0x11, r25	; 17
 29e:	92 b3       	in	r25, 0x12	; 18
 2a0:	89 2b       	or	r24, r25
 2a2:	82 bb       	out	0x12, r24	; 18
 2a4:	4f c0       	rjmp	.+158    	; 0x344 <DIO_INITPIN+0x1fe>
 2a6:	91 30       	cpi	r25, 0x01	; 1
 2a8:	c1 f0       	breq	.+48     	; 0x2da <DIO_INITPIN+0x194>
 2aa:	28 f0       	brcs	.+10     	; 0x2b6 <DIO_INITPIN+0x170>
 2ac:	92 30       	cpi	r25, 0x02	; 2
 2ae:	39 f1       	breq	.+78     	; 0x2fe <DIO_INITPIN+0x1b8>
 2b0:	93 30       	cpi	r25, 0x03	; 3
 2b2:	b9 f1       	breq	.+110    	; 0x322 <DIO_INITPIN+0x1dc>
 2b4:	47 c0       	rjmp	.+142    	; 0x344 <DIO_INITPIN+0x1fe>
 2b6:	4b b3       	in	r20, 0x1b	; 27
 2b8:	21 e0       	ldi	r18, 0x01	; 1
 2ba:	30 e0       	ldi	r19, 0x00	; 0
 2bc:	b9 01       	movw	r22, r18
 2be:	02 c0       	rjmp	.+4      	; 0x2c4 <DIO_INITPIN+0x17e>
 2c0:	66 0f       	add	r22, r22
 2c2:	77 1f       	adc	r23, r23
 2c4:	8a 95       	dec	r24
 2c6:	e2 f7       	brpl	.-8      	; 0x2c0 <DIO_INITPIN+0x17a>
 2c8:	cb 01       	movw	r24, r22
 2ca:	96 2f       	mov	r25, r22
 2cc:	90 95       	com	r25
 2ce:	94 23       	and	r25, r20
 2d0:	9b bb       	out	0x1b, r25	; 27
 2d2:	9a b3       	in	r25, 0x1a	; 26
 2d4:	89 2b       	or	r24, r25
 2d6:	8a bb       	out	0x1a, r24	; 26
 2d8:	35 c0       	rjmp	.+106    	; 0x344 <DIO_INITPIN+0x1fe>
 2da:	48 b3       	in	r20, 0x18	; 24
 2dc:	21 e0       	ldi	r18, 0x01	; 1
 2de:	30 e0       	ldi	r19, 0x00	; 0
 2e0:	b9 01       	movw	r22, r18
 2e2:	02 c0       	rjmp	.+4      	; 0x2e8 <DIO_INITPIN+0x1a2>
 2e4:	66 0f       	add	r22, r22
 2e6:	77 1f       	adc	r23, r23
 2e8:	8a 95       	dec	r24
 2ea:	e2 f7       	brpl	.-8      	; 0x2e4 <DIO_INITPIN+0x19e>
 2ec:	cb 01       	movw	r24, r22
 2ee:	96 2f       	mov	r25, r22
 2f0:	90 95       	com	r25
 2f2:	94 23       	and	r25, r20
 2f4:	98 bb       	out	0x18, r25	; 24
 2f6:	97 b3       	in	r25, 0x17	; 23
 2f8:	89 2b       	or	r24, r25
 2fa:	87 bb       	out	0x17, r24	; 23
 2fc:	23 c0       	rjmp	.+70     	; 0x344 <DIO_INITPIN+0x1fe>
 2fe:	45 b3       	in	r20, 0x15	; 21
 300:	21 e0       	ldi	r18, 0x01	; 1
 302:	30 e0       	ldi	r19, 0x00	; 0
 304:	b9 01       	movw	r22, r18
 306:	02 c0       	rjmp	.+4      	; 0x30c <DIO_INITPIN+0x1c6>
 308:	66 0f       	add	r22, r22
 30a:	77 1f       	adc	r23, r23
 30c:	8a 95       	dec	r24
 30e:	e2 f7       	brpl	.-8      	; 0x308 <DIO_INITPIN+0x1c2>
 310:	cb 01       	movw	r24, r22
 312:	96 2f       	mov	r25, r22
 314:	90 95       	com	r25
 316:	94 23       	and	r25, r20
 318:	95 bb       	out	0x15, r25	; 21
 31a:	94 b3       	in	r25, 0x14	; 20
 31c:	89 2b       	or	r24, r25
 31e:	84 bb       	out	0x14, r24	; 20
 320:	11 c0       	rjmp	.+34     	; 0x344 <DIO_INITPIN+0x1fe>
 322:	42 b3       	in	r20, 0x12	; 18
 324:	21 e0       	ldi	r18, 0x01	; 1
 326:	30 e0       	ldi	r19, 0x00	; 0
 328:	b9 01       	movw	r22, r18
 32a:	02 c0       	rjmp	.+4      	; 0x330 <DIO_INITPIN+0x1ea>
 32c:	66 0f       	add	r22, r22
 32e:	77 1f       	adc	r23, r23
 330:	8a 95       	dec	r24
 332:	e2 f7       	brpl	.-8      	; 0x32c <DIO_INITPIN+0x1e6>
 334:	cb 01       	movw	r24, r22
 336:	96 2f       	mov	r25, r22
 338:	90 95       	com	r25
 33a:	94 23       	and	r25, r20
 33c:	92 bb       	out	0x12, r25	; 18
 33e:	91 b3       	in	r25, 0x11	; 17
 340:	89 2b       	or	r24, r25
 342:	81 bb       	out	0x11, r24	; 17
 344:	08 95       	ret
 346:	82 e0       	ldi	r24, 0x02	; 2
 348:	08 95       	ret

0000034a <DIO_WRITEPIN>:
 34a:	98 2f       	mov	r25, r24
 34c:	96 95       	lsr	r25
 34e:	96 95       	lsr	r25
 350:	96 95       	lsr	r25
 352:	87 70       	andi	r24, 0x07	; 7
 354:	95 30       	cpi	r25, 0x05	; 5
 356:	08 f0       	brcs	.+2      	; 0x35a <DIO_WRITEPIN+0x10>
 358:	8d c0       	rjmp	.+282    	; 0x474 <__EEPROM_REGION_LENGTH__+0x74>
 35a:	63 30       	cpi	r22, 0x03	; 3
 35c:	08 f0       	brcs	.+2      	; 0x360 <DIO_WRITEPIN+0x16>
 35e:	8c c0       	rjmp	.+280    	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
 360:	61 30       	cpi	r22, 0x01	; 1
 362:	09 f0       	breq	.+2      	; 0x366 <DIO_WRITEPIN+0x1c>
 364:	40 c0       	rjmp	.+128    	; 0x3e6 <DIO_WRITEPIN+0x9c>
 366:	91 30       	cpi	r25, 0x01	; 1
 368:	a1 f0       	breq	.+40     	; 0x392 <DIO_WRITEPIN+0x48>
 36a:	28 f0       	brcs	.+10     	; 0x376 <DIO_WRITEPIN+0x2c>
 36c:	92 30       	cpi	r25, 0x02	; 2
 36e:	f9 f0       	breq	.+62     	; 0x3ae <DIO_WRITEPIN+0x64>
 370:	93 30       	cpi	r25, 0x03	; 3
 372:	59 f1       	breq	.+86     	; 0x3ca <DIO_WRITEPIN+0x80>
 374:	83 c0       	rjmp	.+262    	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
 376:	4b b3       	in	r20, 0x1b	; 27
 378:	21 e0       	ldi	r18, 0x01	; 1
 37a:	30 e0       	ldi	r19, 0x00	; 0
 37c:	b9 01       	movw	r22, r18
 37e:	02 c0       	rjmp	.+4      	; 0x384 <DIO_WRITEPIN+0x3a>
 380:	66 0f       	add	r22, r22
 382:	77 1f       	adc	r23, r23
 384:	8a 95       	dec	r24
 386:	e2 f7       	brpl	.-8      	; 0x380 <DIO_WRITEPIN+0x36>
 388:	cb 01       	movw	r24, r22
 38a:	84 2b       	or	r24, r20
 38c:	8b bb       	out	0x1b, r24	; 27
 38e:	80 e0       	ldi	r24, 0x00	; 0
 390:	08 95       	ret
 392:	48 b3       	in	r20, 0x18	; 24
 394:	21 e0       	ldi	r18, 0x01	; 1
 396:	30 e0       	ldi	r19, 0x00	; 0
 398:	b9 01       	movw	r22, r18
 39a:	02 c0       	rjmp	.+4      	; 0x3a0 <DIO_WRITEPIN+0x56>
 39c:	66 0f       	add	r22, r22
 39e:	77 1f       	adc	r23, r23
 3a0:	8a 95       	dec	r24
 3a2:	e2 f7       	brpl	.-8      	; 0x39c <DIO_WRITEPIN+0x52>
 3a4:	cb 01       	movw	r24, r22
 3a6:	84 2b       	or	r24, r20
 3a8:	88 bb       	out	0x18, r24	; 24
 3aa:	80 e0       	ldi	r24, 0x00	; 0
 3ac:	08 95       	ret
 3ae:	45 b3       	in	r20, 0x15	; 21
 3b0:	21 e0       	ldi	r18, 0x01	; 1
 3b2:	30 e0       	ldi	r19, 0x00	; 0
 3b4:	b9 01       	movw	r22, r18
 3b6:	02 c0       	rjmp	.+4      	; 0x3bc <DIO_WRITEPIN+0x72>
 3b8:	66 0f       	add	r22, r22
 3ba:	77 1f       	adc	r23, r23
 3bc:	8a 95       	dec	r24
 3be:	e2 f7       	brpl	.-8      	; 0x3b8 <DIO_WRITEPIN+0x6e>
 3c0:	cb 01       	movw	r24, r22
 3c2:	84 2b       	or	r24, r20
 3c4:	85 bb       	out	0x15, r24	; 21
 3c6:	80 e0       	ldi	r24, 0x00	; 0
 3c8:	08 95       	ret
 3ca:	42 b3       	in	r20, 0x12	; 18
 3cc:	21 e0       	ldi	r18, 0x01	; 1
 3ce:	30 e0       	ldi	r19, 0x00	; 0
 3d0:	b9 01       	movw	r22, r18
 3d2:	02 c0       	rjmp	.+4      	; 0x3d8 <DIO_WRITEPIN+0x8e>
 3d4:	66 0f       	add	r22, r22
 3d6:	77 1f       	adc	r23, r23
 3d8:	8a 95       	dec	r24
 3da:	e2 f7       	brpl	.-8      	; 0x3d4 <DIO_WRITEPIN+0x8a>
 3dc:	cb 01       	movw	r24, r22
 3de:	84 2b       	or	r24, r20
 3e0:	82 bb       	out	0x12, r24	; 18
 3e2:	80 e0       	ldi	r24, 0x00	; 0
 3e4:	08 95       	ret
 3e6:	61 11       	cpse	r22, r1
 3e8:	44 c0       	rjmp	.+136    	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
 3ea:	91 30       	cpi	r25, 0x01	; 1
 3ec:	a9 f0       	breq	.+42     	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 3ee:	28 f0       	brcs	.+10     	; 0x3fa <DIO_WRITEPIN+0xb0>
 3f0:	92 30       	cpi	r25, 0x02	; 2
 3f2:	09 f1       	breq	.+66     	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
 3f4:	93 30       	cpi	r25, 0x03	; 3
 3f6:	71 f1       	breq	.+92     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
 3f8:	43 c0       	rjmp	.+134    	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
 3fa:	4b b3       	in	r20, 0x1b	; 27
 3fc:	21 e0       	ldi	r18, 0x01	; 1
 3fe:	30 e0       	ldi	r19, 0x00	; 0
 400:	b9 01       	movw	r22, r18
 402:	02 c0       	rjmp	.+4      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 404:	66 0f       	add	r22, r22
 406:	77 1f       	adc	r23, r23
 408:	8a 95       	dec	r24
 40a:	e2 f7       	brpl	.-8      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 40c:	cb 01       	movw	r24, r22
 40e:	80 95       	com	r24
 410:	84 23       	and	r24, r20
 412:	8b bb       	out	0x1b, r24	; 27
 414:	80 e0       	ldi	r24, 0x00	; 0
 416:	08 95       	ret
 418:	48 b3       	in	r20, 0x18	; 24
 41a:	21 e0       	ldi	r18, 0x01	; 1
 41c:	30 e0       	ldi	r19, 0x00	; 0
 41e:	b9 01       	movw	r22, r18
 420:	02 c0       	rjmp	.+4      	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 422:	66 0f       	add	r22, r22
 424:	77 1f       	adc	r23, r23
 426:	8a 95       	dec	r24
 428:	e2 f7       	brpl	.-8      	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 42a:	cb 01       	movw	r24, r22
 42c:	80 95       	com	r24
 42e:	84 23       	and	r24, r20
 430:	88 bb       	out	0x18, r24	; 24
 432:	80 e0       	ldi	r24, 0x00	; 0
 434:	08 95       	ret
 436:	45 b3       	in	r20, 0x15	; 21
 438:	21 e0       	ldi	r18, 0x01	; 1
 43a:	30 e0       	ldi	r19, 0x00	; 0
 43c:	b9 01       	movw	r22, r18
 43e:	02 c0       	rjmp	.+4      	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
 440:	66 0f       	add	r22, r22
 442:	77 1f       	adc	r23, r23
 444:	8a 95       	dec	r24
 446:	e2 f7       	brpl	.-8      	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
 448:	cb 01       	movw	r24, r22
 44a:	80 95       	com	r24
 44c:	84 23       	and	r24, r20
 44e:	85 bb       	out	0x15, r24	; 21
 450:	80 e0       	ldi	r24, 0x00	; 0
 452:	08 95       	ret
 454:	42 b3       	in	r20, 0x12	; 18
 456:	21 e0       	ldi	r18, 0x01	; 1
 458:	30 e0       	ldi	r19, 0x00	; 0
 45a:	b9 01       	movw	r22, r18
 45c:	02 c0       	rjmp	.+4      	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
 45e:	66 0f       	add	r22, r22
 460:	77 1f       	adc	r23, r23
 462:	8a 95       	dec	r24
 464:	e2 f7       	brpl	.-8      	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
 466:	cb 01       	movw	r24, r22
 468:	80 95       	com	r24
 46a:	84 23       	and	r24, r20
 46c:	82 bb       	out	0x12, r24	; 18
 46e:	80 e0       	ldi	r24, 0x00	; 0
 470:	08 95       	ret
 472:	08 95       	ret
 474:	82 e0       	ldi	r24, 0x02	; 2
 476:	08 95       	ret
 478:	83 e0       	ldi	r24, 0x03	; 3
 47a:	08 95       	ret
 47c:	80 e0       	ldi	r24, 0x00	; 0
 47e:	08 95       	ret
 480:	80 e0       	ldi	r24, 0x00	; 0
 482:	08 95       	ret

00000484 <__vector_1>:
 484:	1f 92       	push	r1
 486:	0f 92       	push	r0
 488:	0f b6       	in	r0, 0x3f	; 63
 48a:	0f 92       	push	r0
 48c:	11 24       	eor	r1, r1
 48e:	2f 93       	push	r18
 490:	3f 93       	push	r19
 492:	4f 93       	push	r20
 494:	5f 93       	push	r21
 496:	6f 93       	push	r22
 498:	7f 93       	push	r23
 49a:	8f 93       	push	r24
 49c:	9f 93       	push	r25
 49e:	af 93       	push	r26
 4a0:	bf 93       	push	r27
 4a2:	ef 93       	push	r30
 4a4:	ff 93       	push	r31
 4a6:	e0 91 98 00 	lds	r30, 0x0098	; 0x800098 <ptrf_INT_0>
 4aa:	f0 91 99 00 	lds	r31, 0x0099	; 0x800099 <ptrf_INT_0+0x1>
 4ae:	30 97       	sbiw	r30, 0x00	; 0
 4b0:	09 f0       	breq	.+2      	; 0x4b4 <__vector_1+0x30>
 4b2:	09 95       	icall
 4b4:	ff 91       	pop	r31
 4b6:	ef 91       	pop	r30
 4b8:	bf 91       	pop	r27
 4ba:	af 91       	pop	r26
 4bc:	9f 91       	pop	r25
 4be:	8f 91       	pop	r24
 4c0:	7f 91       	pop	r23
 4c2:	6f 91       	pop	r22
 4c4:	5f 91       	pop	r21
 4c6:	4f 91       	pop	r20
 4c8:	3f 91       	pop	r19
 4ca:	2f 91       	pop	r18
 4cc:	0f 90       	pop	r0
 4ce:	0f be       	out	0x3f, r0	; 63
 4d0:	0f 90       	pop	r0
 4d2:	1f 90       	pop	r1
 4d4:	18 95       	reti

000004d6 <__vector_2>:
 4d6:	1f 92       	push	r1
 4d8:	0f 92       	push	r0
 4da:	0f b6       	in	r0, 0x3f	; 63
 4dc:	0f 92       	push	r0
 4de:	11 24       	eor	r1, r1
 4e0:	2f 93       	push	r18
 4e2:	3f 93       	push	r19
 4e4:	4f 93       	push	r20
 4e6:	5f 93       	push	r21
 4e8:	6f 93       	push	r22
 4ea:	7f 93       	push	r23
 4ec:	8f 93       	push	r24
 4ee:	9f 93       	push	r25
 4f0:	af 93       	push	r26
 4f2:	bf 93       	push	r27
 4f4:	ef 93       	push	r30
 4f6:	ff 93       	push	r31
 4f8:	e0 91 96 00 	lds	r30, 0x0096	; 0x800096 <ptrf_INT_1>
 4fc:	f0 91 97 00 	lds	r31, 0x0097	; 0x800097 <ptrf_INT_1+0x1>
 500:	30 97       	sbiw	r30, 0x00	; 0
 502:	09 f0       	breq	.+2      	; 0x506 <__vector_2+0x30>
 504:	09 95       	icall
 506:	ff 91       	pop	r31
 508:	ef 91       	pop	r30
 50a:	bf 91       	pop	r27
 50c:	af 91       	pop	r26
 50e:	9f 91       	pop	r25
 510:	8f 91       	pop	r24
 512:	7f 91       	pop	r23
 514:	6f 91       	pop	r22
 516:	5f 91       	pop	r21
 518:	4f 91       	pop	r20
 51a:	3f 91       	pop	r19
 51c:	2f 91       	pop	r18
 51e:	0f 90       	pop	r0
 520:	0f be       	out	0x3f, r0	; 63
 522:	0f 90       	pop	r0
 524:	1f 90       	pop	r1
 526:	18 95       	reti

00000528 <__vector_3>:
 528:	1f 92       	push	r1
 52a:	0f 92       	push	r0
 52c:	0f b6       	in	r0, 0x3f	; 63
 52e:	0f 92       	push	r0
 530:	11 24       	eor	r1, r1
 532:	2f 93       	push	r18
 534:	3f 93       	push	r19
 536:	4f 93       	push	r20
 538:	5f 93       	push	r21
 53a:	6f 93       	push	r22
 53c:	7f 93       	push	r23
 53e:	8f 93       	push	r24
 540:	9f 93       	push	r25
 542:	af 93       	push	r26
 544:	bf 93       	push	r27
 546:	ef 93       	push	r30
 548:	ff 93       	push	r31
 54a:	e0 91 94 00 	lds	r30, 0x0094	; 0x800094 <__data_end>
 54e:	f0 91 95 00 	lds	r31, 0x0095	; 0x800095 <__data_end+0x1>
 552:	30 97       	sbiw	r30, 0x00	; 0
 554:	09 f0       	breq	.+2      	; 0x558 <__vector_3+0x30>
 556:	09 95       	icall
 558:	ff 91       	pop	r31
 55a:	ef 91       	pop	r30
 55c:	bf 91       	pop	r27
 55e:	af 91       	pop	r26
 560:	9f 91       	pop	r25
 562:	8f 91       	pop	r24
 564:	7f 91       	pop	r23
 566:	6f 91       	pop	r22
 568:	5f 91       	pop	r21
 56a:	4f 91       	pop	r20
 56c:	3f 91       	pop	r19
 56e:	2f 91       	pop	r18
 570:	0f 90       	pop	r0
 572:	0f be       	out	0x3f, r0	; 63
 574:	0f 90       	pop	r0
 576:	1f 90       	pop	r1
 578:	18 95       	reti

0000057a <__vector_12>:
 57a:	1f 92       	push	r1
 57c:	0f 92       	push	r0
 57e:	0f b6       	in	r0, 0x3f	; 63
 580:	0f 92       	push	r0
 582:	11 24       	eor	r1, r1
 584:	2f 93       	push	r18
 586:	3f 93       	push	r19
 588:	4f 93       	push	r20
 58a:	5f 93       	push	r21
 58c:	6f 93       	push	r22
 58e:	7f 93       	push	r23
 590:	8f 93       	push	r24
 592:	9f 93       	push	r25
 594:	af 93       	push	r26
 596:	bf 93       	push	r27
 598:	ef 93       	push	r30
 59a:	ff 93       	push	r31
 59c:	e0 91 9a 00 	lds	r30, 0x009A	; 0x80009a <SPI_Fptr>
 5a0:	f0 91 9b 00 	lds	r31, 0x009B	; 0x80009b <SPI_Fptr+0x1>
 5a4:	30 97       	sbiw	r30, 0x00	; 0
 5a6:	09 f0       	breq	.+2      	; 0x5aa <__vector_12+0x30>
 5a8:	09 95       	icall
 5aa:	ff 91       	pop	r31
 5ac:	ef 91       	pop	r30
 5ae:	bf 91       	pop	r27
 5b0:	af 91       	pop	r26
 5b2:	9f 91       	pop	r25
 5b4:	8f 91       	pop	r24
 5b6:	7f 91       	pop	r23
 5b8:	6f 91       	pop	r22
 5ba:	5f 91       	pop	r21
 5bc:	4f 91       	pop	r20
 5be:	3f 91       	pop	r19
 5c0:	2f 91       	pop	r18
 5c2:	0f 90       	pop	r0
 5c4:	0f be       	out	0x3f, r0	; 63
 5c6:	0f 90       	pop	r0
 5c8:	1f 90       	pop	r1
 5ca:	18 95       	reti

000005cc <__vector_5>:
 5cc:	1f 92       	push	r1
 5ce:	0f 92       	push	r0
 5d0:	0f b6       	in	r0, 0x3f	; 63
 5d2:	0f 92       	push	r0
 5d4:	11 24       	eor	r1, r1
 5d6:	0f 90       	pop	r0
 5d8:	0f be       	out	0x3f, r0	; 63
 5da:	0f 90       	pop	r0
 5dc:	1f 90       	pop	r1
 5de:	18 95       	reti

000005e0 <uart_init>:
{
	set_bit(UCSRB,TXCIE);
}
void uart_TX_intDisable(void)
{
	clear_bit(UCSRB,TXCIE);
 5e0:	80 b5       	in	r24, 0x20	; 32
 5e2:	80 68       	ori	r24, 0x80	; 128
 5e4:	80 bd       	out	0x20, r24	; 32
 5e6:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <g_str_uart_config+0x1>
 5ea:	81 30       	cpi	r24, 0x01	; 1
 5ec:	49 f0       	breq	.+18     	; 0x600 <uart_init+0x20>
 5ee:	18 f0       	brcs	.+6      	; 0x5f6 <uart_init+0x16>
 5f0:	82 30       	cpi	r24, 0x02	; 2
 5f2:	59 f0       	breq	.+22     	; 0x60a <uart_init+0x2a>
 5f4:	12 c0       	rjmp	.+36     	; 0x61a <uart_init+0x3a>
 5f6:	8a b1       	in	r24, 0x0a	; 10
 5f8:	88 60       	ori	r24, 0x08	; 8
 5fa:	8a b9       	out	0x0a, r24	; 10
 5fc:	80 e0       	ldi	r24, 0x00	; 0
 5fe:	0e c0       	rjmp	.+28     	; 0x61c <uart_init+0x3c>
 600:	8a b1       	in	r24, 0x0a	; 10
 602:	80 61       	ori	r24, 0x10	; 16
 604:	8a b9       	out	0x0a, r24	; 10
 606:	80 e0       	ldi	r24, 0x00	; 0
 608:	09 c0       	rjmp	.+18     	; 0x61c <uart_init+0x3c>
 60a:	8a b1       	in	r24, 0x0a	; 10
 60c:	80 61       	ori	r24, 0x10	; 16
 60e:	8a b9       	out	0x0a, r24	; 10
 610:	8a b1       	in	r24, 0x0a	; 10
 612:	88 60       	ori	r24, 0x08	; 8
 614:	8a b9       	out	0x0a, r24	; 10
 616:	80 e0       	ldi	r24, 0x00	; 0
 618:	01 c0       	rjmp	.+2      	; 0x61c <uart_init+0x3c>
 61a:	81 e0       	ldi	r24, 0x01	; 1
 61c:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <g_str_uart_config>
 620:	99 23       	and	r25, r25
 622:	19 f0       	breq	.+6      	; 0x62a <uart_init+0x4a>
 624:	91 30       	cpi	r25, 0x01	; 1
 626:	41 f0       	breq	.+16     	; 0x638 <uart_init+0x58>
 628:	0d c0       	rjmp	.+26     	; 0x644 <uart_init+0x64>
 62a:	9b b1       	in	r25, 0x0b	; 11
 62c:	9d 7f       	andi	r25, 0xFD	; 253
 62e:	9b b9       	out	0x0b, r25	; 11
 630:	93 e3       	ldi	r25, 0x33	; 51
 632:	99 b9       	out	0x09, r25	; 9
 634:	10 bc       	out	0x20, r1	; 32
 636:	07 c0       	rjmp	.+14     	; 0x646 <uart_init+0x66>
 638:	9b b1       	in	r25, 0x0b	; 11
 63a:	92 60       	ori	r25, 0x02	; 2
 63c:	9b b9       	out	0x0b, r25	; 11
 63e:	19 b8       	out	0x09, r1	; 9
 640:	10 bc       	out	0x20, r1	; 32
 642:	01 c0       	rjmp	.+2      	; 0x646 <uart_init+0x66>
 644:	81 e0       	ldi	r24, 0x01	; 1
 646:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <g_str_uart_config+0x2>
 64a:	91 30       	cpi	r25, 0x01	; 1
 64c:	59 f0       	breq	.+22     	; 0x664 <uart_init+0x84>
 64e:	18 f0       	brcs	.+6      	; 0x656 <uart_init+0x76>
 650:	92 30       	cpi	r25, 0x02	; 2
 652:	79 f0       	breq	.+30     	; 0x672 <uart_init+0x92>
 654:	15 c0       	rjmp	.+42     	; 0x680 <uart_init+0xa0>
 656:	90 b5       	in	r25, 0x20	; 32
 658:	9f 7e       	andi	r25, 0xEF	; 239
 65a:	90 bd       	out	0x20, r25	; 32
 65c:	90 b5       	in	r25, 0x20	; 32
 65e:	9f 7d       	andi	r25, 0xDF	; 223
 660:	90 bd       	out	0x20, r25	; 32
 662:	0f c0       	rjmp	.+30     	; 0x682 <uart_init+0xa2>
 664:	90 b5       	in	r25, 0x20	; 32
 666:	9f 7e       	andi	r25, 0xEF	; 239
 668:	90 bd       	out	0x20, r25	; 32
 66a:	90 b5       	in	r25, 0x20	; 32
 66c:	90 62       	ori	r25, 0x20	; 32
 66e:	90 bd       	out	0x20, r25	; 32
 670:	08 c0       	rjmp	.+16     	; 0x682 <uart_init+0xa2>
 672:	90 b5       	in	r25, 0x20	; 32
 674:	90 61       	ori	r25, 0x10	; 16
 676:	90 bd       	out	0x20, r25	; 32
 678:	90 b5       	in	r25, 0x20	; 32
 67a:	90 62       	ori	r25, 0x20	; 32
 67c:	90 bd       	out	0x20, r25	; 32
 67e:	01 c0       	rjmp	.+2      	; 0x682 <uart_init+0xa2>
 680:	81 e0       	ldi	r24, 0x01	; 1
 682:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <g_str_uart_config+0x3>
 686:	99 23       	and	r25, r25
 688:	19 f0       	breq	.+6      	; 0x690 <uart_init+0xb0>
 68a:	91 30       	cpi	r25, 0x01	; 1
 68c:	29 f0       	breq	.+10     	; 0x698 <uart_init+0xb8>
 68e:	08 c0       	rjmp	.+16     	; 0x6a0 <uart_init+0xc0>
 690:	90 b5       	in	r25, 0x20	; 32
 692:	90 64       	ori	r25, 0x40	; 64
 694:	90 bd       	out	0x20, r25	; 32
 696:	05 c0       	rjmp	.+10     	; 0x6a2 <uart_init+0xc2>
 698:	90 b5       	in	r25, 0x20	; 32
 69a:	9f 7b       	andi	r25, 0xBF	; 191
 69c:	90 bd       	out	0x20, r25	; 32
 69e:	01 c0       	rjmp	.+2      	; 0x6a2 <uart_init+0xc2>
 6a0:	81 e0       	ldi	r24, 0x01	; 1
 6a2:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <g_str_uart_config+0x4>
 6a6:	99 23       	and	r25, r25
 6a8:	19 f0       	breq	.+6      	; 0x6b0 <uart_init+0xd0>
 6aa:	91 30       	cpi	r25, 0x01	; 1
 6ac:	29 f0       	breq	.+10     	; 0x6b8 <uart_init+0xd8>
 6ae:	08 c0       	rjmp	.+16     	; 0x6c0 <uart_init+0xe0>
 6b0:	90 b5       	in	r25, 0x20	; 32
 6b2:	97 7f       	andi	r25, 0xF7	; 247
 6b4:	90 bd       	out	0x20, r25	; 32
 6b6:	05 c0       	rjmp	.+10     	; 0x6c2 <uart_init+0xe2>
 6b8:	90 b5       	in	r25, 0x20	; 32
 6ba:	98 60       	ori	r25, 0x08	; 8
 6bc:	90 bd       	out	0x20, r25	; 32
 6be:	01 c0       	rjmp	.+2      	; 0x6c2 <uart_init+0xe2>
 6c0:	81 e0       	ldi	r24, 0x01	; 1
 6c2:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <g_str_uart_config+0x5>
 6c6:	92 30       	cpi	r25, 0x02	; 2
 6c8:	f9 f0       	breq	.+62     	; 0x708 <uart_init+0x128>
 6ca:	28 f4       	brcc	.+10     	; 0x6d6 <uart_init+0xf6>
 6cc:	99 23       	and	r25, r25
 6ce:	41 f0       	breq	.+16     	; 0x6e0 <uart_init+0x100>
 6d0:	91 30       	cpi	r25, 0x01	; 1
 6d2:	81 f0       	breq	.+32     	; 0x6f4 <uart_init+0x114>
 6d4:	37 c0       	rjmp	.+110    	; 0x744 <uart_init+0x164>
 6d6:	93 30       	cpi	r25, 0x03	; 3
 6d8:	09 f1       	breq	.+66     	; 0x71c <uart_init+0x13c>
 6da:	94 30       	cpi	r25, 0x04	; 4
 6dc:	49 f1       	breq	.+82     	; 0x730 <uart_init+0x150>
 6de:	32 c0       	rjmp	.+100    	; 0x744 <uart_init+0x164>
 6e0:	90 b5       	in	r25, 0x20	; 32
 6e2:	9d 7f       	andi	r25, 0xFD	; 253
 6e4:	90 bd       	out	0x20, r25	; 32
 6e6:	90 b5       	in	r25, 0x20	; 32
 6e8:	9b 7f       	andi	r25, 0xFB	; 251
 6ea:	90 bd       	out	0x20, r25	; 32
 6ec:	9a b1       	in	r25, 0x0a	; 10
 6ee:	9b 7f       	andi	r25, 0xFB	; 251
 6f0:	9a b9       	out	0x0a, r25	; 10
 6f2:	08 95       	ret
 6f4:	90 b5       	in	r25, 0x20	; 32
 6f6:	92 60       	ori	r25, 0x02	; 2
 6f8:	90 bd       	out	0x20, r25	; 32
 6fa:	90 b5       	in	r25, 0x20	; 32
 6fc:	9b 7f       	andi	r25, 0xFB	; 251
 6fe:	90 bd       	out	0x20, r25	; 32
 700:	9a b1       	in	r25, 0x0a	; 10
 702:	9b 7f       	andi	r25, 0xFB	; 251
 704:	9a b9       	out	0x0a, r25	; 10
 706:	08 95       	ret
 708:	90 b5       	in	r25, 0x20	; 32
 70a:	9d 7f       	andi	r25, 0xFD	; 253
 70c:	90 bd       	out	0x20, r25	; 32
 70e:	90 b5       	in	r25, 0x20	; 32
 710:	94 60       	ori	r25, 0x04	; 4
 712:	90 bd       	out	0x20, r25	; 32
 714:	9a b1       	in	r25, 0x0a	; 10
 716:	9b 7f       	andi	r25, 0xFB	; 251
 718:	9a b9       	out	0x0a, r25	; 10
 71a:	08 95       	ret
 71c:	90 b5       	in	r25, 0x20	; 32
 71e:	92 60       	ori	r25, 0x02	; 2
 720:	90 bd       	out	0x20, r25	; 32
 722:	90 b5       	in	r25, 0x20	; 32
 724:	94 60       	ori	r25, 0x04	; 4
 726:	90 bd       	out	0x20, r25	; 32
 728:	9a b1       	in	r25, 0x0a	; 10
 72a:	9b 7f       	andi	r25, 0xFB	; 251
 72c:	9a b9       	out	0x0a, r25	; 10
 72e:	08 95       	ret
 730:	90 b5       	in	r25, 0x20	; 32
 732:	92 60       	ori	r25, 0x02	; 2
 734:	90 bd       	out	0x20, r25	; 32
 736:	90 b5       	in	r25, 0x20	; 32
 738:	94 60       	ori	r25, 0x04	; 4
 73a:	90 bd       	out	0x20, r25	; 32
 73c:	9a b1       	in	r25, 0x0a	; 10
 73e:	94 60       	ori	r25, 0x04	; 4
 740:	9a b9       	out	0x0a, r25	; 10
 742:	08 95       	ret
 744:	81 e0       	ldi	r24, 0x01	; 1
 746:	08 95       	ret

00000748 <uart_RX_intEnable>:
 748:	8a b1       	in	r24, 0x0a	; 10
 74a:	80 68       	ori	r24, 0x80	; 128
 74c:	8a b9       	out	0x0a, r24	; 10
 74e:	08 95       	ret

00000750 <__vector_13>:
 750:	1f 92       	push	r1
 752:	0f 92       	push	r0
 754:	0f b6       	in	r0, 0x3f	; 63
 756:	0f 92       	push	r0
 758:	11 24       	eor	r1, r1
 75a:	2f 93       	push	r18
 75c:	3f 93       	push	r19
 75e:	4f 93       	push	r20
 760:	5f 93       	push	r21
 762:	6f 93       	push	r22
 764:	7f 93       	push	r23
 766:	8f 93       	push	r24
 768:	9f 93       	push	r25
 76a:	af 93       	push	r26
 76c:	bf 93       	push	r27
 76e:	ef 93       	push	r30
 770:	ff 93       	push	r31
 772:	e0 91 9e 00 	lds	r30, 0x009E	; 0x80009e <uart_RX_fptr>
 776:	f0 91 9f 00 	lds	r31, 0x009F	; 0x80009f <uart_RX_fptr+0x1>
 77a:	30 97       	sbiw	r30, 0x00	; 0
 77c:	09 f0       	breq	.+2      	; 0x780 <__vector_13+0x30>
 77e:	09 95       	icall
 780:	ff 91       	pop	r31
 782:	ef 91       	pop	r30
 784:	bf 91       	pop	r27
 786:	af 91       	pop	r26
 788:	9f 91       	pop	r25
 78a:	8f 91       	pop	r24
 78c:	7f 91       	pop	r23
 78e:	6f 91       	pop	r22
 790:	5f 91       	pop	r21
 792:	4f 91       	pop	r20
 794:	3f 91       	pop	r19
 796:	2f 91       	pop	r18
 798:	0f 90       	pop	r0
 79a:	0f be       	out	0x3f, r0	; 63
 79c:	0f 90       	pop	r0
 79e:	1f 90       	pop	r1
 7a0:	18 95       	reti

000007a2 <uart_receive>:
 7a2:	8c b1       	in	r24, 0x0c	; 12
 7a4:	08 95       	ret

000007a6 <uart_RX_SetCallBack>:
 7a6:	90 93 9f 00 	sts	0x009F, r25	; 0x80009f <uart_RX_fptr+0x1>
 7aa:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <uart_RX_fptr>
 7ae:	08 95       	ret

000007b0 <__vector_15>:
 7b0:	1f 92       	push	r1
 7b2:	0f 92       	push	r0
 7b4:	0f b6       	in	r0, 0x3f	; 63
 7b6:	0f 92       	push	r0
 7b8:	11 24       	eor	r1, r1
 7ba:	2f 93       	push	r18
 7bc:	3f 93       	push	r19
 7be:	4f 93       	push	r20
 7c0:	5f 93       	push	r21
 7c2:	6f 93       	push	r22
 7c4:	7f 93       	push	r23
 7c6:	8f 93       	push	r24
 7c8:	9f 93       	push	r25
 7ca:	af 93       	push	r26
 7cc:	bf 93       	push	r27
 7ce:	ef 93       	push	r30
 7d0:	ff 93       	push	r31
 7d2:	e0 91 9c 00 	lds	r30, 0x009C	; 0x80009c <uart_TX_fptr>
 7d6:	f0 91 9d 00 	lds	r31, 0x009D	; 0x80009d <uart_TX_fptr+0x1>
 7da:	30 97       	sbiw	r30, 0x00	; 0
 7dc:	09 f0       	breq	.+2      	; 0x7e0 <__vector_15+0x30>
 7de:	09 95       	icall
 7e0:	ff 91       	pop	r31
 7e2:	ef 91       	pop	r30
 7e4:	bf 91       	pop	r27
 7e6:	af 91       	pop	r26
 7e8:	9f 91       	pop	r25
 7ea:	8f 91       	pop	r24
 7ec:	7f 91       	pop	r23
 7ee:	6f 91       	pop	r22
 7f0:	5f 91       	pop	r21
 7f2:	4f 91       	pop	r20
 7f4:	3f 91       	pop	r19
 7f6:	2f 91       	pop	r18
 7f8:	0f 90       	pop	r0
 7fa:	0f be       	out	0x3f, r0	; 63
 7fc:	0f 90       	pop	r0
 7fe:	1f 90       	pop	r1
 800:	18 95       	reti

00000802 <uart_TX_intEnable>:
 802:	8a b1       	in	r24, 0x0a	; 10
 804:	80 64       	ori	r24, 0x40	; 64
 806:	8a b9       	out	0x0a, r24	; 10
 808:	08 95       	ret

0000080a <uart_TX_SetCallBack>:
}
	
void uart_TX_SetCallBack (void(*local_fptr)(void))
{
	uart_TX_fptr = local_fptr;
 80a:	90 93 9d 00 	sts	0x009D, r25	; 0x80009d <uart_TX_fptr+0x1>
 80e:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <uart_TX_fptr>
 812:	08 95       	ret

00000814 <uart_transmit>:
}	

// Data Transmission Sending Frames with 5 to 8 Data Bit
void uart_transmit( uint8_t data )
{										// Put data into buffer, sends the data
	UDR = data;	
 814:	8c b9       	out	0x0c, r24	; 12
 816:	08 95       	ret

00000818 <uart_TX_RX_interrupt_enable>:



void uart_TX_RX_interrupt_enable(void){
	
	uart_RX_intEnable();
 818:	0e 94 a4 03 	call	0x748	; 0x748 <uart_RX_intEnable>
	uart_TX_intEnable();
 81c:	0e 94 01 04 	call	0x802	; 0x802 <uart_TX_intEnable>
 820:	08 95       	ret

00000822 <bcm_init>:
			
			l_send_state_ = BCM_FAILD;
		}
		
	return l_send_state_;
}
 822:	cf 93       	push	r28
 824:	df 93       	push	r29
 826:	00 97       	sbiw	r24, 0x00	; 0
 828:	49 f0       	breq	.+18     	; 0x83c <bcm_init+0x1a>
 82a:	ec 01       	movw	r28, r24
 82c:	e8 81       	ld	r30, Y
 82e:	f9 81       	ldd	r31, Y+1	; 0x01
 830:	09 95       	icall
 832:	ea 81       	ldd	r30, Y+2	; 0x02
 834:	fb 81       	ldd	r31, Y+3	; 0x03
 836:	09 95       	icall
 838:	81 e0       	ldi	r24, 0x01	; 1
 83a:	01 c0       	rjmp	.+2      	; 0x83e <bcm_init+0x1c>
 83c:	82 e0       	ldi	r24, 0x02	; 2
 83e:	df 91       	pop	r29
 840:	cf 91       	pop	r28
 842:	08 95       	ret

00000844 <bcm_send_n>:
enu_bcm_send_state_t bcm_send_n( str_bcm_instance_t *ptr_bcm_instance_t ,uint8_t * ptr_buffer,uint8_t a_buffer_length){
	
		static enu_bcm_send_state_t l_sendState = FIRST_TIME_SENDING ;
		static uint8_t l_bufferNum = FIRST_BUFFER ;
		
	if(ptr_bcm_instance_t != NULL){
 844:	00 97       	sbiw	r24, 0x00	; 0
 846:	09 f4       	brne	.+2      	; 0x84a <bcm_send_n+0x6>
 848:	55 c0       	rjmp	.+170    	; 0x8f4 <__stack+0x95>
		
		if(ptr_bcm_instance_t->ptr_func_init== uart_init)
 84a:	fc 01       	movw	r30, r24
 84c:	80 81       	ld	r24, Z
 84e:	91 81       	ldd	r25, Z+1	; 0x01
 850:	80 5f       	subi	r24, 0xF0	; 240
 852:	92 40       	sbci	r25, 0x02	; 2
 854:	09 f0       	breq	.+2      	; 0x858 <bcm_send_n+0x14>
 856:	51 c0       	rjmp	.+162    	; 0x8fa <__stack+0x9b>
			{
				if (l_sendState == FIRST_TIME_SENDING && ptr_buffer != NULL)													// check if it is the first use to bcm_send_n
 858:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <l_sendState.1809>
 85c:	87 30       	cpi	r24, 0x07	; 7
 85e:	f1 f4       	brne	.+60     	; 0x89c <__stack+0x3d>
 860:	61 15       	cp	r22, r1
 862:	71 05       	cpc	r23, r1
 864:	d9 f0       	breq	.+54     	; 0x89c <__stack+0x3d>
				{		
					str_sending_buffer->ptr_data_buffer[l_bufferNum] = ptr_buffer;												// saving buffer pointer in queue
 866:	20 91 a5 00 	lds	r18, 0x00A5	; 0x8000a5 <l_bufferNum.1810>
 86a:	82 2f       	mov	r24, r18
 86c:	90 e0       	ldi	r25, 0x00	; 0
 86e:	fc 01       	movw	r30, r24
 870:	ee 0f       	add	r30, r30
 872:	ff 1f       	adc	r31, r31
 874:	71 83       	std	Z+1, r23	; 0x01
 876:	60 83       	st	Z, r22
					str_sending_buffer->u8_dataSize[l_bufferNum] = a_buffer_length ;											// saving buffer size in queue
 878:	88 53       	subi	r24, 0x38	; 56
 87a:	9f 4f       	sbci	r25, 0xFF	; 255
 87c:	fc 01       	movw	r30, r24
 87e:	ee 0f       	add	r30, r30
 880:	ff 1f       	adc	r31, r31
 882:	50 e0       	ldi	r21, 0x00	; 0
 884:	51 83       	std	Z+1, r21	; 0x01
 886:	40 83       	st	Z, r20
					gl_uart_state = TX_DONE ;																					// set uart send flag to tx done to make dispatcher start sending
 888:	81 e0       	ldi	r24, 0x01	; 1
 88a:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <gl_uart_state>
					l_bufferNum++;																								// accessing the next pointer to save in it if we use this func again
 88e:	2f 5f       	subi	r18, 0xFF	; 255
 890:	20 93 a5 00 	sts	0x00A5, r18	; 0x8000a5 <l_bufferNum.1810>
					l_sendState = NOT_FIRST_TIME_SENDING ;																		// to enter the NOT_FIRST_TIME_SENDING state
 894:	88 e0       	ldi	r24, 0x08	; 8
 896:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <l_sendState.1809>
 89a:	2f c0       	rjmp	.+94     	; 0x8fa <__stack+0x9b>
					
				} 
				else if (l_sendState == NOT_FIRST_TIME_SENDING && ptr_buffer != NULL)											// check if it is not the first use to bcm_send_n
 89c:	88 30       	cpi	r24, 0x08	; 8
 89e:	e9 f4       	brne	.+58     	; 0x8da <__stack+0x7b>
 8a0:	61 15       	cp	r22, r1
 8a2:	71 05       	cpc	r23, r1
 8a4:	d1 f0       	breq	.+52     	; 0x8da <__stack+0x7b>
				{
					str_sending_buffer->ptr_data_buffer[l_bufferNum]= ptr_buffer;												// saving buffer pointer in queue
 8a6:	e0 91 a5 00 	lds	r30, 0x00A5	; 0x8000a5 <l_bufferNum.1810>
 8aa:	8e 2f       	mov	r24, r30
 8ac:	90 e0       	ldi	r25, 0x00	; 0
 8ae:	dc 01       	movw	r26, r24
 8b0:	aa 0f       	add	r26, r26
 8b2:	bb 1f       	adc	r27, r27
 8b4:	6d 93       	st	X+, r22
 8b6:	7c 93       	st	X, r23
					str_sending_buffer->u8_dataSize[l_bufferNum]=a_buffer_length;											    // saving buffer size in queue
 8b8:	88 53       	subi	r24, 0x38	; 56
 8ba:	9f 4f       	sbci	r25, 0xFF	; 255
 8bc:	dc 01       	movw	r26, r24
 8be:	aa 0f       	add	r26, r26
 8c0:	bb 1f       	adc	r27, r27
 8c2:	50 e0       	ldi	r21, 0x00	; 0
 8c4:	4d 93       	st	X+, r20
 8c6:	5c 93       	st	X, r21
					l_bufferNum++;																								// accessing the next pointer to save in it if we use this func again
 8c8:	ef 5f       	subi	r30, 0xFF	; 255
 8ca:	e0 93 a5 00 	sts	0x00A5, r30	; 0x8000a5 <l_bufferNum.1810>
					str_sending_buffer->ptr_data_buffer[l_bufferNum]=NULL;
 8ce:	f0 e0       	ldi	r31, 0x00	; 0
 8d0:	ee 0f       	add	r30, r30
 8d2:	ff 1f       	adc	r31, r31
 8d4:	11 82       	std	Z+1, r1	; 0x01
 8d6:	10 82       	st	Z, r1
 8d8:	10 c0       	rjmp	.+32     	; 0x8fa <__stack+0x9b>
				}
				else if (ptr_buffer == NULL)																					
 8da:	67 2b       	or	r22, r23
 8dc:	71 f4       	brne	.+28     	; 0x8fa <__stack+0x9b>
				{
					str_sending_buffer->ptr_data_buffer[l_bufferNum]=NULL;
 8de:	e0 91 a5 00 	lds	r30, 0x00A5	; 0x8000a5 <l_bufferNum.1810>
 8e2:	f0 e0       	ldi	r31, 0x00	; 0
 8e4:	ee 0f       	add	r30, r30
 8e6:	ff 1f       	adc	r31, r31
 8e8:	11 82       	std	Z+1, r1	; 0x01
 8ea:	10 82       	st	Z, r1
					l_sendState = SEND_FAILD_NULL_PTR;
 8ec:	89 e0       	ldi	r24, 0x09	; 9
 8ee:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <l_sendState.1809>
 8f2:	03 c0       	rjmp	.+6      	; 0x8fa <__stack+0x9b>
				}	
			}
		}
		else 
		{	
			l_sendState = BCM_FAILD;
 8f4:	82 e0       	ldi	r24, 0x02	; 2
 8f6:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <l_sendState.1809>
		
		return l_sendState;
	
	
	
}
 8fa:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <l_sendState.1809>
 8fe:	08 95       	ret

00000900 <bcm_disbatcher>:


enu_bcm_send_state_t bcm_disbatcher(str_bcm_instance_t *ptr_bcm_instance_t ,enu_bcm_first_use a_first_use)
{
 900:	cf 93       	push	r28
 902:	df 93       	push	r29
 904:	dc 01       	movw	r26, r24
	static enu_bcm_first_use l_first_use ;
	if(l_first_use != 0)																									// used to convert the state of the dispatcher between sending and receiving
 906:	80 91 a4 00 	lds	r24, 0x00A4	; 0x8000a4 <l_first_use.1815>
 90a:	81 11       	cpse	r24, r1
 90c:	02 c0       	rjmp	.+4      	; 0x912 <bcm_disbatcher+0x12>
	{
		a_first_use = l_first_use;
	}
	else
	{
		l_first_use =a_first_use;
 90e:	60 93 a4 00 	sts	0x00A4, r22	; 0x8000a4 <l_first_use.1815>
	}
	static uint8_t l_buffer_Num									= FIRST_BUFFER ;
	static uint8_t l_buffer_element								= FIRST_ELEMENT;
	static uint8_t l_rx_buffer_element							= FIRST_ELEMENT;
	static enu_bcm_send_state_t dispatcher_state				= IDLE ;
	 uint16 l_buffer_size										=str_sending_buffer->u8_dataSize[l_buffer_Num];
 912:	90 91 a3 00 	lds	r25, 0x00A3	; 0x8000a3 <l_buffer_Num.1816>
 916:	29 2f       	mov	r18, r25
 918:	30 e0       	ldi	r19, 0x00	; 0
 91a:	f9 01       	movw	r30, r18
 91c:	e8 53       	subi	r30, 0x38	; 56
 91e:	ff 4f       	sbci	r31, 0xFF	; 255
 920:	ee 0f       	add	r30, r30
 922:	ff 1f       	adc	r31, r31
 924:	60 81       	ld	r22, Z
 926:	71 81       	ldd	r23, Z+1	; 0x01
	
	if(ptr_bcm_instance_t->ptr_func_init == uart_init)																		// if we use uart
 928:	4d 91       	ld	r20, X+
 92a:	5c 91       	ld	r21, X
 92c:	40 5f       	subi	r20, 0xF0	; 240
 92e:	52 40       	sbci	r21, 0x02	; 2
 930:	09 f0       	breq	.+2      	; 0x934 <bcm_disbatcher+0x34>
 932:	88 c0       	rjmp	.+272    	; 0xa44 <bcm_disbatcher+0x144>
	{
		if( l_first_use == SENDING_FIRST)																					// if app select to send first or we activities sending after receiving
 934:	80 91 a4 00 	lds	r24, 0x00A4	; 0x8000a4 <l_first_use.1815>
 938:	81 30       	cpi	r24, 0x01	; 1
 93a:	09 f0       	breq	.+2      	; 0x93e <bcm_disbatcher+0x3e>
 93c:	47 c0       	rjmp	.+142    	; 0x9cc <bcm_disbatcher+0xcc>
		{
			if(gl_uart_state == TX_DONE )																					// if sending is done
 93e:	80 91 a7 00 	lds	r24, 0x00A7	; 0x8000a7 <gl_uart_state>
 942:	81 30       	cpi	r24, 0x01	; 1
 944:	09 f0       	breq	.+2      	; 0x948 <bcm_disbatcher+0x48>
 946:	7e c0       	rjmp	.+252    	; 0xa44 <bcm_disbatcher+0x144>
			{							
				if(l_buffer_element < l_buffer_size )																		// checking if we not send all buffer yet
 948:	40 91 a2 00 	lds	r20, 0x00A2	; 0x8000a2 <l_buffer_element.1817>
 94c:	50 e0       	ldi	r21, 0x00	; 0
 94e:	46 17       	cp	r20, r22
 950:	57 07       	cpc	r21, r23
 952:	d0 f4       	brcc	.+52     	; 0x988 <bcm_disbatcher+0x88>
				{	
					gl_uart_state								= READY ;                                                   // set flag that passed to isr to ready to let isr change it if tx completed
 954:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <gl_uart_state>
					uart_transmit(str_sending_buffer->ptr_data_buffer[l_buffer_Num][l_buffer_element]);						// sending buffer elements
 958:	f9 01       	movw	r30, r18
 95a:	ee 0f       	add	r30, r30
 95c:	ff 1f       	adc	r31, r31
 95e:	80 81       	ld	r24, Z
 960:	91 81       	ldd	r25, Z+1	; 0x01
 962:	fc 01       	movw	r30, r24
 964:	e4 0f       	add	r30, r20
 966:	f5 1f       	adc	r31, r21
 968:	80 81       	ld	r24, Z
 96a:	0e 94 0a 04 	call	0x814	; 0x814 <uart_transmit>
					uart_TX_SetCallBack(uart_isr_send_func);					
 96e:	87 e2       	ldi	r24, 0x27	; 39
 970:	95 e0       	ldi	r25, 0x05	; 5
 972:	0e 94 05 04 	call	0x80a	; 0x80a <uart_TX_SetCallBack>
					l_buffer_element++;
 976:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <l_buffer_element.1817>
 97a:	8f 5f       	subi	r24, 0xFF	; 255
 97c:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <l_buffer_element.1817>
					dispatcher_state							= SENDING ;													// state of dispatcher now is sending 
 980:	83 e0       	ldi	r24, 0x03	; 3
 982:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <dispatcher_state.1819>
 986:	5e c0       	rjmp	.+188    	; 0xa44 <bcm_disbatcher+0x144>
			
				}
		
				else if ( l_buffer_element >= l_buffer_size )																// checking if we send all buffer 
 988:	46 17       	cp	r20, r22
 98a:	57 07       	cpc	r21, r23
 98c:	08 f4       	brcc	.+2      	; 0x990 <bcm_disbatcher+0x90>
 98e:	5a c0       	rjmp	.+180    	; 0xa44 <bcm_disbatcher+0x144>
				{
			
					gl_uart_state								= READY ;													// set flag that passed to isr to ready to let isr change it if tx completed
 990:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <gl_uart_state>
					dispatcher_state							= BUFFER_SENT_OK ;											// state of dispatcher now is BUFFER_SENT_OK 
 994:	8a e0       	ldi	r24, 0x0A	; 10
 996:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <dispatcher_state.1819>
					l_buffer_Num++;																							// accessing next buffer to send
 99a:	9f 5f       	subi	r25, 0xFF	; 255
 99c:	90 93 a3 00 	sts	0x00A3, r25	; 0x8000a3 <l_buffer_Num.1816>
					
					if (str_sending_buffer->ptr_data_buffer[l_buffer_Num] != NULL)											// checking if there is another buffer to send				
 9a0:	e9 2f       	mov	r30, r25
 9a2:	f0 e0       	ldi	r31, 0x00	; 0
 9a4:	ee 0f       	add	r30, r30
 9a6:	ff 1f       	adc	r31, r31
 9a8:	80 81       	ld	r24, Z
 9aa:	91 81       	ldd	r25, Z+1	; 0x01
 9ac:	89 2b       	or	r24, r25
 9ae:	41 f0       	breq	.+16     	; 0x9c0 <bcm_disbatcher+0xc0>
					{
						
						gl_uart_state							= TX_DONE ;													// to let dispatcher send 
 9b0:	81 e0       	ldi	r24, 0x01	; 1
 9b2:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <gl_uart_state>
						l_buffer_element						= FIRST_ELEMENT;
 9b6:	10 92 a2 00 	sts	0x00A2, r1	; 0x8000a2 <l_buffer_element.1817>
						dispatcher_state						= IDLE ;
 9ba:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <dispatcher_state.1819>
 9be:	42 c0       	rjmp	.+132    	; 0xa44 <bcm_disbatcher+0x144>
					}
					else{																									// if there is no other buffer
						gl_uart_state								= READY ;
						l_buffer_element						= FIRST_ELEMENT;
 9c0:	10 92 a2 00 	sts	0x00A2, r1	; 0x8000a2 <l_buffer_element.1817>
						l_first_use								= RECEVING_FIRST;											// activate receiving
 9c4:	82 e0       	ldi	r24, 0x02	; 2
 9c6:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <l_first_use.1815>
 9ca:	3c c0       	rjmp	.+120    	; 0xa44 <bcm_disbatcher+0x144>
					}
				}
			}
		}
		
		else if( l_first_use == RECEVING_FIRST)																			// if app select to send first or we activities sending after receiving 
 9cc:	82 30       	cpi	r24, 0x02	; 2
 9ce:	b9 f5       	brne	.+110    	; 0xa3e <bcm_disbatcher+0x13e>
		{
			
			uart_RX_SetCallBack(uart_isr_recieve_func);
 9d0:	8b e2       	ldi	r24, 0x2B	; 43
 9d2:	95 e0       	ldi	r25, 0x05	; 5
 9d4:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <uart_RX_SetCallBack>
			if (gl_uart_state2 == RX_DONE)																				// if there is data to read 
 9d8:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <gl_uart_state2>
 9dc:	82 30       	cpi	r24, 0x02	; 2
 9de:	91 f5       	brne	.+100    	; 0xa44 <bcm_disbatcher+0x144>
			{
		
				str_receving_buffer->ptr_dataBASE[l_rx_buffer_element] = uart_receive();                                // saving data in array
 9e0:	c0 91 a0 00 	lds	r28, 0x00A0	; 0x8000a0 <l_rx_buffer_element.1818>
 9e4:	d0 e0       	ldi	r29, 0x00	; 0
 9e6:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <uart_receive>
 9ea:	c0 5e       	subi	r28, 0xE0	; 224
 9ec:	dc 4f       	sbci	r29, 0xFC	; 252
 9ee:	88 83       	st	Y, r24
				
				if(str_receving_buffer->ptr_dataBASE[l_buffer_element] != NULL)
 9f0:	e0 91 a2 00 	lds	r30, 0x00A2	; 0x8000a2 <l_buffer_element.1817>
 9f4:	f0 e0       	ldi	r31, 0x00	; 0
 9f6:	e0 5e       	subi	r30, 0xE0	; 224
 9f8:	fc 4f       	sbci	r31, 0xFC	; 252
 9fa:	80 81       	ld	r24, Z
 9fc:	88 23       	and	r24, r24
 9fe:	11 f1       	breq	.+68     	; 0xa44 <bcm_disbatcher+0x144>
				{	
					if(str_receving_buffer->ptr_dataBASE[l_rx_buffer_element]  == '&')									// if we receive the acknowledge of sending is done 
 a00:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <l_rx_buffer_element.1818>
 a04:	e8 2f       	mov	r30, r24
 a06:	f0 e0       	ldi	r31, 0x00	; 0
 a08:	e0 5e       	subi	r30, 0xE0	; 224
 a0a:	fc 4f       	sbci	r31, 0xFC	; 252
 a0c:	90 81       	ld	r25, Z
 a0e:	96 32       	cpi	r25, 0x26	; 38
 a10:	69 f4       	brne	.+26     	; 0xa2c <bcm_disbatcher+0x12c>
					{
						l_rx_buffer_element							=FIRST_ELEMENT;
 a12:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <l_rx_buffer_element.1818>
						l_first_use									= SENDING_FIRST;									// activate sending again
 a16:	81 e0       	ldi	r24, 0x01	; 1
 a18:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <l_first_use.1815>
						gl_uart_state								= TX_DONE;
 a1c:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <gl_uart_state>
						dispatcher_state							= BUFFER_RECEIVED_OK;								// state of dispatcher now is BUFFER_RECEIVED_OK 
 a20:	8b e0       	ldi	r24, 0x0B	; 11
 a22:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <dispatcher_state.1819>
						gl_uart_state2								= READY;
 a26:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <gl_uart_state2>
 a2a:	0c c0       	rjmp	.+24     	; 0xa44 <bcm_disbatcher+0x144>
					}
					else
					{	
						dispatcher_state							= RECEVING;											// state of dispatcher now is BUFFER_RECEIVED_OK
 a2c:	94 e0       	ldi	r25, 0x04	; 4
 a2e:	90 93 a1 00 	sts	0x00A1, r25	; 0x8000a1 <dispatcher_state.1819>
						l_rx_buffer_element++;
 a32:	8f 5f       	subi	r24, 0xFF	; 255
 a34:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <l_rx_buffer_element.1818>
						gl_uart_state2								= READY;
 a38:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <gl_uart_state2>
 a3c:	03 c0       	rjmp	.+6      	; 0xa44 <bcm_disbatcher+0x144>
		}
		
		else
		{

			dispatcher_state									 = INVALID_STATE;
 a3e:	81 e0       	ldi	r24, 0x01	; 1
 a40:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <dispatcher_state.1819>
		}
		
	}
	return dispatcher_state ;
 a44:	80 91 a1 00 	lds	r24, 0x00A1	; 0x8000a1 <dispatcher_state.1819>
 a48:	df 91       	pop	r29
 a4a:	cf 91       	pop	r28
 a4c:	08 95       	ret

00000a4e <uart_isr_send_func>:

//--------------------------- UART INTERRUPT HANDLING -------------------- //

void uart_isr_send_func (void){

	gl_uart_state = TX_DONE ;
 a4e:	81 e0       	ldi	r24, 0x01	; 1
 a50:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <gl_uart_state>
 a54:	08 95       	ret

00000a56 <uart_isr_recieve_func>:
	
}

void uart_isr_recieve_func (void){

	gl_uart_state2 = RX_DONE ;
 a56:	82 e0       	ldi	r24, 0x02	; 2
 a58:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <gl_uart_state2>
 a5c:	08 95       	ret

00000a5e <_exit>:
 a5e:	f8 94       	cli

00000a60 <__stop_program>:
 a60:	ff cf       	rjmp	.-2      	; 0xa60 <__stop_program>
