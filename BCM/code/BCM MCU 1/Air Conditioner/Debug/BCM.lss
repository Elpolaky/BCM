
BCM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a46  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002c  00800060  00000a46  00000ada  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  0080008c  0080008c  00000b06  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b06  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000b38  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000308  00000000  00000000  00000b74  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000296f  00000000  00000000  00000e7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010e1  00000000  00000000  000037eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000019bc  00000000  00000000  000048cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000738  00000000  00000000  00006288  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000013a0  00000000  00000000  000069c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001ea3  00000000  00000000  00007d60  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000250  00000000  00000000  00009c03  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 02 	jmp	0x468	; 0x468 <__vector_1>
   8:	0c 94 5d 02 	jmp	0x4ba	; 0x4ba <__vector_2>
   c:	0c 94 86 02 	jmp	0x50c	; 0x50c <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 d8 02 	jmp	0x5b0	; 0x5b0 <__vector_5>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 af 02 	jmp	0x55e	; 0x55e <__vector_12>
  34:	0c 94 9a 03 	jmp	0x734	; 0x734 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 ca 03 	jmp	0x794	; 0x794 <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e4       	ldi	r30, 0x46	; 70
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 38       	cpi	r26, 0x8C	; 140
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac e8       	ldi	r26, 0x8C	; 140
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 3a       	cpi	r26, 0xA0	; 160
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 90 00 	call	0x120	; 0x120 <main>
  8a:	0c 94 21 05 	jmp	0xa42	; 0xa42 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <app_Init>:
  92:	78 94       	sei
  94:	83 e8       	ldi	r24, 0x83	; 131
  96:	90 e0       	ldi	r25, 0x00	; 0
  98:	0e 94 03 04 	call	0x806	; 0x806 <bcm_init>
  9c:	40 91 61 00 	lds	r20, 0x0061	; 0x800061 <y>
  a0:	6d e6       	ldi	r22, 0x6D	; 109
  a2:	70 e0       	ldi	r23, 0x00	; 0
  a4:	83 e8       	ldi	r24, 0x83	; 131
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	0e 94 14 04 	call	0x828	; 0x828 <bcm_send_n>
  ac:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <x>
  b0:	64 e6       	ldi	r22, 0x64	; 100
  b2:	70 e0       	ldi	r23, 0x00	; 0
  b4:	83 e8       	ldi	r24, 0x83	; 131
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	0e 94 14 04 	call	0x828	; 0x828 <bcm_send_n>
  bc:	40 91 60 00 	lds	r20, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  c0:	63 e6       	ldi	r22, 0x63	; 99
  c2:	70 e0       	ldi	r23, 0x00	; 0
  c4:	83 e8       	ldi	r24, 0x83	; 131
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	0e 94 14 04 	call	0x828	; 0x828 <bcm_send_n>
  cc:	80 e0       	ldi	r24, 0x00	; 0
  ce:	0e 94 7e 00 	call	0xfc	; 0xfc <LED_INIT>
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	0e 94 7e 00 	call	0xfc	; 0xfc <LED_INIT>
  d8:	08 95       	ret

000000da <app_Start>:
  da:	61 e0       	ldi	r22, 0x01	; 1
  dc:	83 e8       	ldi	r24, 0x83	; 131
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	0e 94 72 04 	call	0x8e4	; 0x8e4 <bcm_disbatcher>
  e4:	8a 30       	cpi	r24, 0x0A	; 10
  e6:	21 f4       	brne	.+8      	; 0xf0 <app_Start+0x16>
  e8:	80 e0       	ldi	r24, 0x00	; 0
  ea:	0e 94 87 00 	call	0x10e	; 0x10e <LED_ON>
  ee:	08 95       	ret
  f0:	8b 30       	cpi	r24, 0x0B	; 11
  f2:	19 f4       	brne	.+6      	; 0xfa <app_Start+0x20>
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	0e 94 87 00 	call	0x10e	; 0x10e <LED_ON>
  fa:	08 95       	ret

000000fc <LED_INIT>:
  fc:	88 32       	cpi	r24, 0x28	; 40
  fe:	28 f4       	brcc	.+10     	; 0x10a <LED_INIT+0xe>
 100:	60 e0       	ldi	r22, 0x00	; 0
 102:	0e 94 95 00 	call	0x12a	; 0x12a <DIO_INITPIN>
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	08 95       	ret
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	08 95       	ret

0000010e <LED_ON>:
 10e:	88 32       	cpi	r24, 0x28	; 40
 110:	28 f4       	brcc	.+10     	; 0x11c <LED_ON+0xe>
 112:	61 e0       	ldi	r22, 0x01	; 1
 114:	0e 94 97 01 	call	0x32e	; 0x32e <DIO_WRITEPIN>
 118:	80 e0       	ldi	r24, 0x00	; 0
 11a:	08 95       	ret
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	08 95       	ret

00000120 <main>:
 120:	0e 94 49 00 	call	0x92	; 0x92 <app_Init>
 124:	0e 94 6d 00 	call	0xda	; 0xda <app_Start>
 128:	fd cf       	rjmp	.-6      	; 0x124 <main+0x4>

0000012a <DIO_INITPIN>:
 12a:	98 2f       	mov	r25, r24
 12c:	96 95       	lsr	r25
 12e:	96 95       	lsr	r25
 130:	96 95       	lsr	r25
 132:	87 70       	andi	r24, 0x07	; 7
 134:	95 30       	cpi	r25, 0x05	; 5
 136:	08 f0       	brcs	.+2      	; 0x13a <DIO_INITPIN+0x10>
 138:	f8 c0       	rjmp	.+496    	; 0x32a <DIO_INITPIN+0x200>
 13a:	61 30       	cpi	r22, 0x01	; 1
 13c:	31 f0       	breq	.+12     	; 0x14a <DIO_INITPIN+0x20>
 13e:	08 f4       	brcc	.+2      	; 0x142 <DIO_INITPIN+0x18>
 140:	a4 c0       	rjmp	.+328    	; 0x28a <DIO_INITPIN+0x160>
 142:	62 30       	cpi	r22, 0x02	; 2
 144:	09 f4       	brne	.+2      	; 0x148 <DIO_INITPIN+0x1e>
 146:	51 c0       	rjmp	.+162    	; 0x1ea <DIO_INITPIN+0xc0>
 148:	ef c0       	rjmp	.+478    	; 0x328 <DIO_INITPIN+0x1fe>
 14a:	91 30       	cpi	r25, 0x01	; 1
 14c:	c1 f0       	breq	.+48     	; 0x17e <DIO_INITPIN+0x54>
 14e:	28 f0       	brcs	.+10     	; 0x15a <DIO_INITPIN+0x30>
 150:	92 30       	cpi	r25, 0x02	; 2
 152:	39 f1       	breq	.+78     	; 0x1a2 <DIO_INITPIN+0x78>
 154:	93 30       	cpi	r25, 0x03	; 3
 156:	b9 f1       	breq	.+110    	; 0x1c6 <DIO_INITPIN+0x9c>
 158:	e7 c0       	rjmp	.+462    	; 0x328 <DIO_INITPIN+0x1fe>
 15a:	4a b3       	in	r20, 0x1a	; 26
 15c:	21 e0       	ldi	r18, 0x01	; 1
 15e:	30 e0       	ldi	r19, 0x00	; 0
 160:	b9 01       	movw	r22, r18
 162:	02 c0       	rjmp	.+4      	; 0x168 <DIO_INITPIN+0x3e>
 164:	66 0f       	add	r22, r22
 166:	77 1f       	adc	r23, r23
 168:	8a 95       	dec	r24
 16a:	e2 f7       	brpl	.-8      	; 0x164 <DIO_INITPIN+0x3a>
 16c:	cb 01       	movw	r24, r22
 16e:	80 95       	com	r24
 170:	94 2f       	mov	r25, r20
 172:	98 23       	and	r25, r24
 174:	9a bb       	out	0x1a, r25	; 26
 176:	9b b3       	in	r25, 0x1b	; 27
 178:	89 23       	and	r24, r25
 17a:	8b bb       	out	0x1b, r24	; 27
 17c:	d5 c0       	rjmp	.+426    	; 0x328 <DIO_INITPIN+0x1fe>
 17e:	47 b3       	in	r20, 0x17	; 23
 180:	21 e0       	ldi	r18, 0x01	; 1
 182:	30 e0       	ldi	r19, 0x00	; 0
 184:	b9 01       	movw	r22, r18
 186:	02 c0       	rjmp	.+4      	; 0x18c <DIO_INITPIN+0x62>
 188:	66 0f       	add	r22, r22
 18a:	77 1f       	adc	r23, r23
 18c:	8a 95       	dec	r24
 18e:	e2 f7       	brpl	.-8      	; 0x188 <DIO_INITPIN+0x5e>
 190:	cb 01       	movw	r24, r22
 192:	80 95       	com	r24
 194:	94 2f       	mov	r25, r20
 196:	98 23       	and	r25, r24
 198:	97 bb       	out	0x17, r25	; 23
 19a:	98 b3       	in	r25, 0x18	; 24
 19c:	89 23       	and	r24, r25
 19e:	88 bb       	out	0x18, r24	; 24
 1a0:	c3 c0       	rjmp	.+390    	; 0x328 <DIO_INITPIN+0x1fe>
 1a2:	44 b3       	in	r20, 0x14	; 20
 1a4:	21 e0       	ldi	r18, 0x01	; 1
 1a6:	30 e0       	ldi	r19, 0x00	; 0
 1a8:	b9 01       	movw	r22, r18
 1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <DIO_INITPIN+0x86>
 1ac:	66 0f       	add	r22, r22
 1ae:	77 1f       	adc	r23, r23
 1b0:	8a 95       	dec	r24
 1b2:	e2 f7       	brpl	.-8      	; 0x1ac <DIO_INITPIN+0x82>
 1b4:	cb 01       	movw	r24, r22
 1b6:	80 95       	com	r24
 1b8:	94 2f       	mov	r25, r20
 1ba:	98 23       	and	r25, r24
 1bc:	94 bb       	out	0x14, r25	; 20
 1be:	95 b3       	in	r25, 0x15	; 21
 1c0:	89 23       	and	r24, r25
 1c2:	85 bb       	out	0x15, r24	; 21
 1c4:	b1 c0       	rjmp	.+354    	; 0x328 <DIO_INITPIN+0x1fe>
 1c6:	41 b3       	in	r20, 0x11	; 17
 1c8:	21 e0       	ldi	r18, 0x01	; 1
 1ca:	30 e0       	ldi	r19, 0x00	; 0
 1cc:	b9 01       	movw	r22, r18
 1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <DIO_INITPIN+0xaa>
 1d0:	66 0f       	add	r22, r22
 1d2:	77 1f       	adc	r23, r23
 1d4:	8a 95       	dec	r24
 1d6:	e2 f7       	brpl	.-8      	; 0x1d0 <DIO_INITPIN+0xa6>
 1d8:	cb 01       	movw	r24, r22
 1da:	80 95       	com	r24
 1dc:	94 2f       	mov	r25, r20
 1de:	98 23       	and	r25, r24
 1e0:	91 bb       	out	0x11, r25	; 17
 1e2:	92 b3       	in	r25, 0x12	; 18
 1e4:	89 23       	and	r24, r25
 1e6:	82 bb       	out	0x12, r24	; 18
 1e8:	9f c0       	rjmp	.+318    	; 0x328 <DIO_INITPIN+0x1fe>
 1ea:	91 30       	cpi	r25, 0x01	; 1
 1ec:	c1 f0       	breq	.+48     	; 0x21e <DIO_INITPIN+0xf4>
 1ee:	28 f0       	brcs	.+10     	; 0x1fa <DIO_INITPIN+0xd0>
 1f0:	92 30       	cpi	r25, 0x02	; 2
 1f2:	39 f1       	breq	.+78     	; 0x242 <DIO_INITPIN+0x118>
 1f4:	93 30       	cpi	r25, 0x03	; 3
 1f6:	b9 f1       	breq	.+110    	; 0x266 <DIO_INITPIN+0x13c>
 1f8:	97 c0       	rjmp	.+302    	; 0x328 <DIO_INITPIN+0x1fe>
 1fa:	4a b3       	in	r20, 0x1a	; 26
 1fc:	21 e0       	ldi	r18, 0x01	; 1
 1fe:	30 e0       	ldi	r19, 0x00	; 0
 200:	b9 01       	movw	r22, r18
 202:	02 c0       	rjmp	.+4      	; 0x208 <DIO_INITPIN+0xde>
 204:	66 0f       	add	r22, r22
 206:	77 1f       	adc	r23, r23
 208:	8a 95       	dec	r24
 20a:	e2 f7       	brpl	.-8      	; 0x204 <DIO_INITPIN+0xda>
 20c:	cb 01       	movw	r24, r22
 20e:	96 2f       	mov	r25, r22
 210:	90 95       	com	r25
 212:	94 23       	and	r25, r20
 214:	9a bb       	out	0x1a, r25	; 26
 216:	9b b3       	in	r25, 0x1b	; 27
 218:	89 2b       	or	r24, r25
 21a:	8b bb       	out	0x1b, r24	; 27
 21c:	85 c0       	rjmp	.+266    	; 0x328 <DIO_INITPIN+0x1fe>
 21e:	47 b3       	in	r20, 0x17	; 23
 220:	21 e0       	ldi	r18, 0x01	; 1
 222:	30 e0       	ldi	r19, 0x00	; 0
 224:	b9 01       	movw	r22, r18
 226:	02 c0       	rjmp	.+4      	; 0x22c <DIO_INITPIN+0x102>
 228:	66 0f       	add	r22, r22
 22a:	77 1f       	adc	r23, r23
 22c:	8a 95       	dec	r24
 22e:	e2 f7       	brpl	.-8      	; 0x228 <DIO_INITPIN+0xfe>
 230:	cb 01       	movw	r24, r22
 232:	96 2f       	mov	r25, r22
 234:	90 95       	com	r25
 236:	94 23       	and	r25, r20
 238:	97 bb       	out	0x17, r25	; 23
 23a:	98 b3       	in	r25, 0x18	; 24
 23c:	89 2b       	or	r24, r25
 23e:	88 bb       	out	0x18, r24	; 24
 240:	73 c0       	rjmp	.+230    	; 0x328 <DIO_INITPIN+0x1fe>
 242:	44 b3       	in	r20, 0x14	; 20
 244:	21 e0       	ldi	r18, 0x01	; 1
 246:	30 e0       	ldi	r19, 0x00	; 0
 248:	b9 01       	movw	r22, r18
 24a:	02 c0       	rjmp	.+4      	; 0x250 <DIO_INITPIN+0x126>
 24c:	66 0f       	add	r22, r22
 24e:	77 1f       	adc	r23, r23
 250:	8a 95       	dec	r24
 252:	e2 f7       	brpl	.-8      	; 0x24c <DIO_INITPIN+0x122>
 254:	cb 01       	movw	r24, r22
 256:	96 2f       	mov	r25, r22
 258:	90 95       	com	r25
 25a:	94 23       	and	r25, r20
 25c:	94 bb       	out	0x14, r25	; 20
 25e:	95 b3       	in	r25, 0x15	; 21
 260:	89 2b       	or	r24, r25
 262:	85 bb       	out	0x15, r24	; 21
 264:	61 c0       	rjmp	.+194    	; 0x328 <DIO_INITPIN+0x1fe>
 266:	41 b3       	in	r20, 0x11	; 17
 268:	21 e0       	ldi	r18, 0x01	; 1
 26a:	30 e0       	ldi	r19, 0x00	; 0
 26c:	b9 01       	movw	r22, r18
 26e:	02 c0       	rjmp	.+4      	; 0x274 <DIO_INITPIN+0x14a>
 270:	66 0f       	add	r22, r22
 272:	77 1f       	adc	r23, r23
 274:	8a 95       	dec	r24
 276:	e2 f7       	brpl	.-8      	; 0x270 <DIO_INITPIN+0x146>
 278:	cb 01       	movw	r24, r22
 27a:	96 2f       	mov	r25, r22
 27c:	90 95       	com	r25
 27e:	94 23       	and	r25, r20
 280:	91 bb       	out	0x11, r25	; 17
 282:	92 b3       	in	r25, 0x12	; 18
 284:	89 2b       	or	r24, r25
 286:	82 bb       	out	0x12, r24	; 18
 288:	4f c0       	rjmp	.+158    	; 0x328 <DIO_INITPIN+0x1fe>
 28a:	91 30       	cpi	r25, 0x01	; 1
 28c:	c1 f0       	breq	.+48     	; 0x2be <DIO_INITPIN+0x194>
 28e:	28 f0       	brcs	.+10     	; 0x29a <DIO_INITPIN+0x170>
 290:	92 30       	cpi	r25, 0x02	; 2
 292:	39 f1       	breq	.+78     	; 0x2e2 <DIO_INITPIN+0x1b8>
 294:	93 30       	cpi	r25, 0x03	; 3
 296:	b9 f1       	breq	.+110    	; 0x306 <DIO_INITPIN+0x1dc>
 298:	47 c0       	rjmp	.+142    	; 0x328 <DIO_INITPIN+0x1fe>
 29a:	4b b3       	in	r20, 0x1b	; 27
 29c:	21 e0       	ldi	r18, 0x01	; 1
 29e:	30 e0       	ldi	r19, 0x00	; 0
 2a0:	b9 01       	movw	r22, r18
 2a2:	02 c0       	rjmp	.+4      	; 0x2a8 <DIO_INITPIN+0x17e>
 2a4:	66 0f       	add	r22, r22
 2a6:	77 1f       	adc	r23, r23
 2a8:	8a 95       	dec	r24
 2aa:	e2 f7       	brpl	.-8      	; 0x2a4 <DIO_INITPIN+0x17a>
 2ac:	cb 01       	movw	r24, r22
 2ae:	96 2f       	mov	r25, r22
 2b0:	90 95       	com	r25
 2b2:	94 23       	and	r25, r20
 2b4:	9b bb       	out	0x1b, r25	; 27
 2b6:	9a b3       	in	r25, 0x1a	; 26
 2b8:	89 2b       	or	r24, r25
 2ba:	8a bb       	out	0x1a, r24	; 26
 2bc:	35 c0       	rjmp	.+106    	; 0x328 <DIO_INITPIN+0x1fe>
 2be:	48 b3       	in	r20, 0x18	; 24
 2c0:	21 e0       	ldi	r18, 0x01	; 1
 2c2:	30 e0       	ldi	r19, 0x00	; 0
 2c4:	b9 01       	movw	r22, r18
 2c6:	02 c0       	rjmp	.+4      	; 0x2cc <DIO_INITPIN+0x1a2>
 2c8:	66 0f       	add	r22, r22
 2ca:	77 1f       	adc	r23, r23
 2cc:	8a 95       	dec	r24
 2ce:	e2 f7       	brpl	.-8      	; 0x2c8 <DIO_INITPIN+0x19e>
 2d0:	cb 01       	movw	r24, r22
 2d2:	96 2f       	mov	r25, r22
 2d4:	90 95       	com	r25
 2d6:	94 23       	and	r25, r20
 2d8:	98 bb       	out	0x18, r25	; 24
 2da:	97 b3       	in	r25, 0x17	; 23
 2dc:	89 2b       	or	r24, r25
 2de:	87 bb       	out	0x17, r24	; 23
 2e0:	23 c0       	rjmp	.+70     	; 0x328 <DIO_INITPIN+0x1fe>
 2e2:	45 b3       	in	r20, 0x15	; 21
 2e4:	21 e0       	ldi	r18, 0x01	; 1
 2e6:	30 e0       	ldi	r19, 0x00	; 0
 2e8:	b9 01       	movw	r22, r18
 2ea:	02 c0       	rjmp	.+4      	; 0x2f0 <DIO_INITPIN+0x1c6>
 2ec:	66 0f       	add	r22, r22
 2ee:	77 1f       	adc	r23, r23
 2f0:	8a 95       	dec	r24
 2f2:	e2 f7       	brpl	.-8      	; 0x2ec <DIO_INITPIN+0x1c2>
 2f4:	cb 01       	movw	r24, r22
 2f6:	96 2f       	mov	r25, r22
 2f8:	90 95       	com	r25
 2fa:	94 23       	and	r25, r20
 2fc:	95 bb       	out	0x15, r25	; 21
 2fe:	94 b3       	in	r25, 0x14	; 20
 300:	89 2b       	or	r24, r25
 302:	84 bb       	out	0x14, r24	; 20
 304:	11 c0       	rjmp	.+34     	; 0x328 <DIO_INITPIN+0x1fe>
 306:	42 b3       	in	r20, 0x12	; 18
 308:	21 e0       	ldi	r18, 0x01	; 1
 30a:	30 e0       	ldi	r19, 0x00	; 0
 30c:	b9 01       	movw	r22, r18
 30e:	02 c0       	rjmp	.+4      	; 0x314 <DIO_INITPIN+0x1ea>
 310:	66 0f       	add	r22, r22
 312:	77 1f       	adc	r23, r23
 314:	8a 95       	dec	r24
 316:	e2 f7       	brpl	.-8      	; 0x310 <DIO_INITPIN+0x1e6>
 318:	cb 01       	movw	r24, r22
 31a:	96 2f       	mov	r25, r22
 31c:	90 95       	com	r25
 31e:	94 23       	and	r25, r20
 320:	92 bb       	out	0x12, r25	; 18
 322:	91 b3       	in	r25, 0x11	; 17
 324:	89 2b       	or	r24, r25
 326:	81 bb       	out	0x11, r24	; 17
 328:	08 95       	ret
 32a:	82 e0       	ldi	r24, 0x02	; 2
 32c:	08 95       	ret

0000032e <DIO_WRITEPIN>:
 32e:	98 2f       	mov	r25, r24
 330:	96 95       	lsr	r25
 332:	96 95       	lsr	r25
 334:	96 95       	lsr	r25
 336:	87 70       	andi	r24, 0x07	; 7
 338:	95 30       	cpi	r25, 0x05	; 5
 33a:	08 f0       	brcs	.+2      	; 0x33e <DIO_WRITEPIN+0x10>
 33c:	8d c0       	rjmp	.+282    	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
 33e:	63 30       	cpi	r22, 0x03	; 3
 340:	08 f0       	brcs	.+2      	; 0x344 <DIO_WRITEPIN+0x16>
 342:	8c c0       	rjmp	.+280    	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
 344:	61 30       	cpi	r22, 0x01	; 1
 346:	09 f0       	breq	.+2      	; 0x34a <DIO_WRITEPIN+0x1c>
 348:	40 c0       	rjmp	.+128    	; 0x3ca <DIO_WRITEPIN+0x9c>
 34a:	91 30       	cpi	r25, 0x01	; 1
 34c:	a1 f0       	breq	.+40     	; 0x376 <DIO_WRITEPIN+0x48>
 34e:	28 f0       	brcs	.+10     	; 0x35a <DIO_WRITEPIN+0x2c>
 350:	92 30       	cpi	r25, 0x02	; 2
 352:	f9 f0       	breq	.+62     	; 0x392 <DIO_WRITEPIN+0x64>
 354:	93 30       	cpi	r25, 0x03	; 3
 356:	59 f1       	breq	.+86     	; 0x3ae <DIO_WRITEPIN+0x80>
 358:	83 c0       	rjmp	.+262    	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
 35a:	4b b3       	in	r20, 0x1b	; 27
 35c:	21 e0       	ldi	r18, 0x01	; 1
 35e:	30 e0       	ldi	r19, 0x00	; 0
 360:	b9 01       	movw	r22, r18
 362:	02 c0       	rjmp	.+4      	; 0x368 <DIO_WRITEPIN+0x3a>
 364:	66 0f       	add	r22, r22
 366:	77 1f       	adc	r23, r23
 368:	8a 95       	dec	r24
 36a:	e2 f7       	brpl	.-8      	; 0x364 <DIO_WRITEPIN+0x36>
 36c:	cb 01       	movw	r24, r22
 36e:	84 2b       	or	r24, r20
 370:	8b bb       	out	0x1b, r24	; 27
 372:	80 e0       	ldi	r24, 0x00	; 0
 374:	08 95       	ret
 376:	48 b3       	in	r20, 0x18	; 24
 378:	21 e0       	ldi	r18, 0x01	; 1
 37a:	30 e0       	ldi	r19, 0x00	; 0
 37c:	b9 01       	movw	r22, r18
 37e:	02 c0       	rjmp	.+4      	; 0x384 <DIO_WRITEPIN+0x56>
 380:	66 0f       	add	r22, r22
 382:	77 1f       	adc	r23, r23
 384:	8a 95       	dec	r24
 386:	e2 f7       	brpl	.-8      	; 0x380 <DIO_WRITEPIN+0x52>
 388:	cb 01       	movw	r24, r22
 38a:	84 2b       	or	r24, r20
 38c:	88 bb       	out	0x18, r24	; 24
 38e:	80 e0       	ldi	r24, 0x00	; 0
 390:	08 95       	ret
 392:	45 b3       	in	r20, 0x15	; 21
 394:	21 e0       	ldi	r18, 0x01	; 1
 396:	30 e0       	ldi	r19, 0x00	; 0
 398:	b9 01       	movw	r22, r18
 39a:	02 c0       	rjmp	.+4      	; 0x3a0 <DIO_WRITEPIN+0x72>
 39c:	66 0f       	add	r22, r22
 39e:	77 1f       	adc	r23, r23
 3a0:	8a 95       	dec	r24
 3a2:	e2 f7       	brpl	.-8      	; 0x39c <DIO_WRITEPIN+0x6e>
 3a4:	cb 01       	movw	r24, r22
 3a6:	84 2b       	or	r24, r20
 3a8:	85 bb       	out	0x15, r24	; 21
 3aa:	80 e0       	ldi	r24, 0x00	; 0
 3ac:	08 95       	ret
 3ae:	42 b3       	in	r20, 0x12	; 18
 3b0:	21 e0       	ldi	r18, 0x01	; 1
 3b2:	30 e0       	ldi	r19, 0x00	; 0
 3b4:	b9 01       	movw	r22, r18
 3b6:	02 c0       	rjmp	.+4      	; 0x3bc <DIO_WRITEPIN+0x8e>
 3b8:	66 0f       	add	r22, r22
 3ba:	77 1f       	adc	r23, r23
 3bc:	8a 95       	dec	r24
 3be:	e2 f7       	brpl	.-8      	; 0x3b8 <DIO_WRITEPIN+0x8a>
 3c0:	cb 01       	movw	r24, r22
 3c2:	84 2b       	or	r24, r20
 3c4:	82 bb       	out	0x12, r24	; 18
 3c6:	80 e0       	ldi	r24, 0x00	; 0
 3c8:	08 95       	ret
 3ca:	61 11       	cpse	r22, r1
 3cc:	44 c0       	rjmp	.+136    	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
 3ce:	91 30       	cpi	r25, 0x01	; 1
 3d0:	a9 f0       	breq	.+42     	; 0x3fc <DIO_WRITEPIN+0xce>
 3d2:	28 f0       	brcs	.+10     	; 0x3de <DIO_WRITEPIN+0xb0>
 3d4:	92 30       	cpi	r25, 0x02	; 2
 3d6:	09 f1       	breq	.+66     	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 3d8:	93 30       	cpi	r25, 0x03	; 3
 3da:	71 f1       	breq	.+92     	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
 3dc:	43 c0       	rjmp	.+134    	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
 3de:	4b b3       	in	r20, 0x1b	; 27
 3e0:	21 e0       	ldi	r18, 0x01	; 1
 3e2:	30 e0       	ldi	r19, 0x00	; 0
 3e4:	b9 01       	movw	r22, r18
 3e6:	02 c0       	rjmp	.+4      	; 0x3ec <DIO_WRITEPIN+0xbe>
 3e8:	66 0f       	add	r22, r22
 3ea:	77 1f       	adc	r23, r23
 3ec:	8a 95       	dec	r24
 3ee:	e2 f7       	brpl	.-8      	; 0x3e8 <DIO_WRITEPIN+0xba>
 3f0:	cb 01       	movw	r24, r22
 3f2:	80 95       	com	r24
 3f4:	84 23       	and	r24, r20
 3f6:	8b bb       	out	0x1b, r24	; 27
 3f8:	80 e0       	ldi	r24, 0x00	; 0
 3fa:	08 95       	ret
 3fc:	48 b3       	in	r20, 0x18	; 24
 3fe:	21 e0       	ldi	r18, 0x01	; 1
 400:	30 e0       	ldi	r19, 0x00	; 0
 402:	b9 01       	movw	r22, r18
 404:	02 c0       	rjmp	.+4      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 406:	66 0f       	add	r22, r22
 408:	77 1f       	adc	r23, r23
 40a:	8a 95       	dec	r24
 40c:	e2 f7       	brpl	.-8      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 40e:	cb 01       	movw	r24, r22
 410:	80 95       	com	r24
 412:	84 23       	and	r24, r20
 414:	88 bb       	out	0x18, r24	; 24
 416:	80 e0       	ldi	r24, 0x00	; 0
 418:	08 95       	ret
 41a:	45 b3       	in	r20, 0x15	; 21
 41c:	21 e0       	ldi	r18, 0x01	; 1
 41e:	30 e0       	ldi	r19, 0x00	; 0
 420:	b9 01       	movw	r22, r18
 422:	02 c0       	rjmp	.+4      	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 424:	66 0f       	add	r22, r22
 426:	77 1f       	adc	r23, r23
 428:	8a 95       	dec	r24
 42a:	e2 f7       	brpl	.-8      	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
 42c:	cb 01       	movw	r24, r22
 42e:	80 95       	com	r24
 430:	84 23       	and	r24, r20
 432:	85 bb       	out	0x15, r24	; 21
 434:	80 e0       	ldi	r24, 0x00	; 0
 436:	08 95       	ret
 438:	42 b3       	in	r20, 0x12	; 18
 43a:	21 e0       	ldi	r18, 0x01	; 1
 43c:	30 e0       	ldi	r19, 0x00	; 0
 43e:	b9 01       	movw	r22, r18
 440:	02 c0       	rjmp	.+4      	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
 442:	66 0f       	add	r22, r22
 444:	77 1f       	adc	r23, r23
 446:	8a 95       	dec	r24
 448:	e2 f7       	brpl	.-8      	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
 44a:	cb 01       	movw	r24, r22
 44c:	80 95       	com	r24
 44e:	84 23       	and	r24, r20
 450:	82 bb       	out	0x12, r24	; 18
 452:	80 e0       	ldi	r24, 0x00	; 0
 454:	08 95       	ret
 456:	08 95       	ret
 458:	82 e0       	ldi	r24, 0x02	; 2
 45a:	08 95       	ret
 45c:	83 e0       	ldi	r24, 0x03	; 3
 45e:	08 95       	ret
 460:	80 e0       	ldi	r24, 0x00	; 0
 462:	08 95       	ret
 464:	80 e0       	ldi	r24, 0x00	; 0
 466:	08 95       	ret

00000468 <__vector_1>:
 468:	1f 92       	push	r1
 46a:	0f 92       	push	r0
 46c:	0f b6       	in	r0, 0x3f	; 63
 46e:	0f 92       	push	r0
 470:	11 24       	eor	r1, r1
 472:	2f 93       	push	r18
 474:	3f 93       	push	r19
 476:	4f 93       	push	r20
 478:	5f 93       	push	r21
 47a:	6f 93       	push	r22
 47c:	7f 93       	push	r23
 47e:	8f 93       	push	r24
 480:	9f 93       	push	r25
 482:	af 93       	push	r26
 484:	bf 93       	push	r27
 486:	ef 93       	push	r30
 488:	ff 93       	push	r31
 48a:	e0 91 90 00 	lds	r30, 0x0090	; 0x800090 <ptrf_INT_0>
 48e:	f0 91 91 00 	lds	r31, 0x0091	; 0x800091 <ptrf_INT_0+0x1>
 492:	30 97       	sbiw	r30, 0x00	; 0
 494:	09 f0       	breq	.+2      	; 0x498 <__vector_1+0x30>
 496:	09 95       	icall
 498:	ff 91       	pop	r31
 49a:	ef 91       	pop	r30
 49c:	bf 91       	pop	r27
 49e:	af 91       	pop	r26
 4a0:	9f 91       	pop	r25
 4a2:	8f 91       	pop	r24
 4a4:	7f 91       	pop	r23
 4a6:	6f 91       	pop	r22
 4a8:	5f 91       	pop	r21
 4aa:	4f 91       	pop	r20
 4ac:	3f 91       	pop	r19
 4ae:	2f 91       	pop	r18
 4b0:	0f 90       	pop	r0
 4b2:	0f be       	out	0x3f, r0	; 63
 4b4:	0f 90       	pop	r0
 4b6:	1f 90       	pop	r1
 4b8:	18 95       	reti

000004ba <__vector_2>:
 4ba:	1f 92       	push	r1
 4bc:	0f 92       	push	r0
 4be:	0f b6       	in	r0, 0x3f	; 63
 4c0:	0f 92       	push	r0
 4c2:	11 24       	eor	r1, r1
 4c4:	2f 93       	push	r18
 4c6:	3f 93       	push	r19
 4c8:	4f 93       	push	r20
 4ca:	5f 93       	push	r21
 4cc:	6f 93       	push	r22
 4ce:	7f 93       	push	r23
 4d0:	8f 93       	push	r24
 4d2:	9f 93       	push	r25
 4d4:	af 93       	push	r26
 4d6:	bf 93       	push	r27
 4d8:	ef 93       	push	r30
 4da:	ff 93       	push	r31
 4dc:	e0 91 8e 00 	lds	r30, 0x008E	; 0x80008e <ptrf_INT_1>
 4e0:	f0 91 8f 00 	lds	r31, 0x008F	; 0x80008f <ptrf_INT_1+0x1>
 4e4:	30 97       	sbiw	r30, 0x00	; 0
 4e6:	09 f0       	breq	.+2      	; 0x4ea <__vector_2+0x30>
 4e8:	09 95       	icall
 4ea:	ff 91       	pop	r31
 4ec:	ef 91       	pop	r30
 4ee:	bf 91       	pop	r27
 4f0:	af 91       	pop	r26
 4f2:	9f 91       	pop	r25
 4f4:	8f 91       	pop	r24
 4f6:	7f 91       	pop	r23
 4f8:	6f 91       	pop	r22
 4fa:	5f 91       	pop	r21
 4fc:	4f 91       	pop	r20
 4fe:	3f 91       	pop	r19
 500:	2f 91       	pop	r18
 502:	0f 90       	pop	r0
 504:	0f be       	out	0x3f, r0	; 63
 506:	0f 90       	pop	r0
 508:	1f 90       	pop	r1
 50a:	18 95       	reti

0000050c <__vector_3>:
 50c:	1f 92       	push	r1
 50e:	0f 92       	push	r0
 510:	0f b6       	in	r0, 0x3f	; 63
 512:	0f 92       	push	r0
 514:	11 24       	eor	r1, r1
 516:	2f 93       	push	r18
 518:	3f 93       	push	r19
 51a:	4f 93       	push	r20
 51c:	5f 93       	push	r21
 51e:	6f 93       	push	r22
 520:	7f 93       	push	r23
 522:	8f 93       	push	r24
 524:	9f 93       	push	r25
 526:	af 93       	push	r26
 528:	bf 93       	push	r27
 52a:	ef 93       	push	r30
 52c:	ff 93       	push	r31
 52e:	e0 91 8c 00 	lds	r30, 0x008C	; 0x80008c <__data_end>
 532:	f0 91 8d 00 	lds	r31, 0x008D	; 0x80008d <__data_end+0x1>
 536:	30 97       	sbiw	r30, 0x00	; 0
 538:	09 f0       	breq	.+2      	; 0x53c <__vector_3+0x30>
 53a:	09 95       	icall
 53c:	ff 91       	pop	r31
 53e:	ef 91       	pop	r30
 540:	bf 91       	pop	r27
 542:	af 91       	pop	r26
 544:	9f 91       	pop	r25
 546:	8f 91       	pop	r24
 548:	7f 91       	pop	r23
 54a:	6f 91       	pop	r22
 54c:	5f 91       	pop	r21
 54e:	4f 91       	pop	r20
 550:	3f 91       	pop	r19
 552:	2f 91       	pop	r18
 554:	0f 90       	pop	r0
 556:	0f be       	out	0x3f, r0	; 63
 558:	0f 90       	pop	r0
 55a:	1f 90       	pop	r1
 55c:	18 95       	reti

0000055e <__vector_12>:
 55e:	1f 92       	push	r1
 560:	0f 92       	push	r0
 562:	0f b6       	in	r0, 0x3f	; 63
 564:	0f 92       	push	r0
 566:	11 24       	eor	r1, r1
 568:	2f 93       	push	r18
 56a:	3f 93       	push	r19
 56c:	4f 93       	push	r20
 56e:	5f 93       	push	r21
 570:	6f 93       	push	r22
 572:	7f 93       	push	r23
 574:	8f 93       	push	r24
 576:	9f 93       	push	r25
 578:	af 93       	push	r26
 57a:	bf 93       	push	r27
 57c:	ef 93       	push	r30
 57e:	ff 93       	push	r31
 580:	e0 91 92 00 	lds	r30, 0x0092	; 0x800092 <SPI_Fptr>
 584:	f0 91 93 00 	lds	r31, 0x0093	; 0x800093 <SPI_Fptr+0x1>
 588:	30 97       	sbiw	r30, 0x00	; 0
 58a:	09 f0       	breq	.+2      	; 0x58e <__vector_12+0x30>
 58c:	09 95       	icall
 58e:	ff 91       	pop	r31
 590:	ef 91       	pop	r30
 592:	bf 91       	pop	r27
 594:	af 91       	pop	r26
 596:	9f 91       	pop	r25
 598:	8f 91       	pop	r24
 59a:	7f 91       	pop	r23
 59c:	6f 91       	pop	r22
 59e:	5f 91       	pop	r21
 5a0:	4f 91       	pop	r20
 5a2:	3f 91       	pop	r19
 5a4:	2f 91       	pop	r18
 5a6:	0f 90       	pop	r0
 5a8:	0f be       	out	0x3f, r0	; 63
 5aa:	0f 90       	pop	r0
 5ac:	1f 90       	pop	r1
 5ae:	18 95       	reti

000005b0 <__vector_5>:
 5b0:	1f 92       	push	r1
 5b2:	0f 92       	push	r0
 5b4:	0f b6       	in	r0, 0x3f	; 63
 5b6:	0f 92       	push	r0
 5b8:	11 24       	eor	r1, r1
 5ba:	0f 90       	pop	r0
 5bc:	0f be       	out	0x3f, r0	; 63
 5be:	0f 90       	pop	r0
 5c0:	1f 90       	pop	r1
 5c2:	18 95       	reti

000005c4 <uart_init>:
 5c4:	80 b5       	in	r24, 0x20	; 32
 5c6:	80 68       	ori	r24, 0x80	; 128
 5c8:	80 bd       	out	0x20, r24	; 32
 5ca:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <g_str_uart_config+0x1>
 5ce:	81 30       	cpi	r24, 0x01	; 1
 5d0:	49 f0       	breq	.+18     	; 0x5e4 <uart_init+0x20>
 5d2:	18 f0       	brcs	.+6      	; 0x5da <uart_init+0x16>
 5d4:	82 30       	cpi	r24, 0x02	; 2
 5d6:	59 f0       	breq	.+22     	; 0x5ee <uart_init+0x2a>
 5d8:	12 c0       	rjmp	.+36     	; 0x5fe <uart_init+0x3a>
 5da:	8a b1       	in	r24, 0x0a	; 10
 5dc:	88 60       	ori	r24, 0x08	; 8
 5de:	8a b9       	out	0x0a, r24	; 10
 5e0:	80 e0       	ldi	r24, 0x00	; 0
 5e2:	0e c0       	rjmp	.+28     	; 0x600 <uart_init+0x3c>
 5e4:	8a b1       	in	r24, 0x0a	; 10
 5e6:	80 61       	ori	r24, 0x10	; 16
 5e8:	8a b9       	out	0x0a, r24	; 10
 5ea:	80 e0       	ldi	r24, 0x00	; 0
 5ec:	09 c0       	rjmp	.+18     	; 0x600 <uart_init+0x3c>
 5ee:	8a b1       	in	r24, 0x0a	; 10
 5f0:	80 61       	ori	r24, 0x10	; 16
 5f2:	8a b9       	out	0x0a, r24	; 10
 5f4:	8a b1       	in	r24, 0x0a	; 10
 5f6:	88 60       	ori	r24, 0x08	; 8
 5f8:	8a b9       	out	0x0a, r24	; 10
 5fa:	80 e0       	ldi	r24, 0x00	; 0
 5fc:	01 c0       	rjmp	.+2      	; 0x600 <uart_init+0x3c>
 5fe:	81 e0       	ldi	r24, 0x01	; 1
 600:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <g_str_uart_config>
 604:	99 23       	and	r25, r25
 606:	19 f0       	breq	.+6      	; 0x60e <uart_init+0x4a>
 608:	91 30       	cpi	r25, 0x01	; 1
 60a:	41 f0       	breq	.+16     	; 0x61c <uart_init+0x58>
 60c:	0d c0       	rjmp	.+26     	; 0x628 <uart_init+0x64>
 60e:	9b b1       	in	r25, 0x0b	; 11
 610:	9d 7f       	andi	r25, 0xFD	; 253
 612:	9b b9       	out	0x0b, r25	; 11
 614:	93 e3       	ldi	r25, 0x33	; 51
 616:	99 b9       	out	0x09, r25	; 9
 618:	10 bc       	out	0x20, r1	; 32
 61a:	07 c0       	rjmp	.+14     	; 0x62a <uart_init+0x66>
 61c:	9b b1       	in	r25, 0x0b	; 11
 61e:	92 60       	ori	r25, 0x02	; 2
 620:	9b b9       	out	0x0b, r25	; 11
 622:	19 b8       	out	0x09, r1	; 9
 624:	10 bc       	out	0x20, r1	; 32
 626:	01 c0       	rjmp	.+2      	; 0x62a <uart_init+0x66>
 628:	81 e0       	ldi	r24, 0x01	; 1
 62a:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <g_str_uart_config+0x2>
 62e:	91 30       	cpi	r25, 0x01	; 1
 630:	59 f0       	breq	.+22     	; 0x648 <uart_init+0x84>
 632:	18 f0       	brcs	.+6      	; 0x63a <uart_init+0x76>
 634:	92 30       	cpi	r25, 0x02	; 2
 636:	79 f0       	breq	.+30     	; 0x656 <uart_init+0x92>
 638:	15 c0       	rjmp	.+42     	; 0x664 <uart_init+0xa0>
 63a:	90 b5       	in	r25, 0x20	; 32
 63c:	9f 7e       	andi	r25, 0xEF	; 239
 63e:	90 bd       	out	0x20, r25	; 32
 640:	90 b5       	in	r25, 0x20	; 32
 642:	9f 7d       	andi	r25, 0xDF	; 223
 644:	90 bd       	out	0x20, r25	; 32
 646:	0f c0       	rjmp	.+30     	; 0x666 <uart_init+0xa2>
 648:	90 b5       	in	r25, 0x20	; 32
 64a:	9f 7e       	andi	r25, 0xEF	; 239
 64c:	90 bd       	out	0x20, r25	; 32
 64e:	90 b5       	in	r25, 0x20	; 32
 650:	90 62       	ori	r25, 0x20	; 32
 652:	90 bd       	out	0x20, r25	; 32
 654:	08 c0       	rjmp	.+16     	; 0x666 <uart_init+0xa2>
 656:	90 b5       	in	r25, 0x20	; 32
 658:	90 61       	ori	r25, 0x10	; 16
 65a:	90 bd       	out	0x20, r25	; 32
 65c:	90 b5       	in	r25, 0x20	; 32
 65e:	90 62       	ori	r25, 0x20	; 32
 660:	90 bd       	out	0x20, r25	; 32
 662:	01 c0       	rjmp	.+2      	; 0x666 <uart_init+0xa2>
 664:	81 e0       	ldi	r24, 0x01	; 1
 666:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <g_str_uart_config+0x3>
 66a:	99 23       	and	r25, r25
 66c:	19 f0       	breq	.+6      	; 0x674 <uart_init+0xb0>
 66e:	91 30       	cpi	r25, 0x01	; 1
 670:	29 f0       	breq	.+10     	; 0x67c <uart_init+0xb8>
 672:	08 c0       	rjmp	.+16     	; 0x684 <uart_init+0xc0>
 674:	90 b5       	in	r25, 0x20	; 32
 676:	90 64       	ori	r25, 0x40	; 64
 678:	90 bd       	out	0x20, r25	; 32
 67a:	05 c0       	rjmp	.+10     	; 0x686 <uart_init+0xc2>
 67c:	90 b5       	in	r25, 0x20	; 32
 67e:	9f 7b       	andi	r25, 0xBF	; 191
 680:	90 bd       	out	0x20, r25	; 32
 682:	01 c0       	rjmp	.+2      	; 0x686 <uart_init+0xc2>
 684:	81 e0       	ldi	r24, 0x01	; 1
 686:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <g_str_uart_config+0x4>
 68a:	99 23       	and	r25, r25
 68c:	19 f0       	breq	.+6      	; 0x694 <uart_init+0xd0>
 68e:	91 30       	cpi	r25, 0x01	; 1
 690:	29 f0       	breq	.+10     	; 0x69c <uart_init+0xd8>
 692:	08 c0       	rjmp	.+16     	; 0x6a4 <uart_init+0xe0>
 694:	90 b5       	in	r25, 0x20	; 32
 696:	97 7f       	andi	r25, 0xF7	; 247
 698:	90 bd       	out	0x20, r25	; 32
 69a:	05 c0       	rjmp	.+10     	; 0x6a6 <uart_init+0xe2>
 69c:	90 b5       	in	r25, 0x20	; 32
 69e:	98 60       	ori	r25, 0x08	; 8
 6a0:	90 bd       	out	0x20, r25	; 32
 6a2:	01 c0       	rjmp	.+2      	; 0x6a6 <uart_init+0xe2>
 6a4:	81 e0       	ldi	r24, 0x01	; 1
 6a6:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <g_str_uart_config+0x5>
 6aa:	92 30       	cpi	r25, 0x02	; 2
 6ac:	f9 f0       	breq	.+62     	; 0x6ec <uart_init+0x128>
 6ae:	28 f4       	brcc	.+10     	; 0x6ba <uart_init+0xf6>
 6b0:	99 23       	and	r25, r25
 6b2:	41 f0       	breq	.+16     	; 0x6c4 <uart_init+0x100>
 6b4:	91 30       	cpi	r25, 0x01	; 1
 6b6:	81 f0       	breq	.+32     	; 0x6d8 <uart_init+0x114>
 6b8:	37 c0       	rjmp	.+110    	; 0x728 <uart_init+0x164>
 6ba:	93 30       	cpi	r25, 0x03	; 3
 6bc:	09 f1       	breq	.+66     	; 0x700 <uart_init+0x13c>
 6be:	94 30       	cpi	r25, 0x04	; 4
 6c0:	49 f1       	breq	.+82     	; 0x714 <uart_init+0x150>
 6c2:	32 c0       	rjmp	.+100    	; 0x728 <uart_init+0x164>
 6c4:	90 b5       	in	r25, 0x20	; 32
 6c6:	9d 7f       	andi	r25, 0xFD	; 253
 6c8:	90 bd       	out	0x20, r25	; 32
 6ca:	90 b5       	in	r25, 0x20	; 32
 6cc:	9b 7f       	andi	r25, 0xFB	; 251
 6ce:	90 bd       	out	0x20, r25	; 32
 6d0:	9a b1       	in	r25, 0x0a	; 10
 6d2:	9b 7f       	andi	r25, 0xFB	; 251
 6d4:	9a b9       	out	0x0a, r25	; 10
 6d6:	08 95       	ret
 6d8:	90 b5       	in	r25, 0x20	; 32
 6da:	92 60       	ori	r25, 0x02	; 2
 6dc:	90 bd       	out	0x20, r25	; 32
 6de:	90 b5       	in	r25, 0x20	; 32
 6e0:	9b 7f       	andi	r25, 0xFB	; 251
 6e2:	90 bd       	out	0x20, r25	; 32
 6e4:	9a b1       	in	r25, 0x0a	; 10
 6e6:	9b 7f       	andi	r25, 0xFB	; 251
 6e8:	9a b9       	out	0x0a, r25	; 10
 6ea:	08 95       	ret
 6ec:	90 b5       	in	r25, 0x20	; 32
 6ee:	9d 7f       	andi	r25, 0xFD	; 253
 6f0:	90 bd       	out	0x20, r25	; 32
 6f2:	90 b5       	in	r25, 0x20	; 32
 6f4:	94 60       	ori	r25, 0x04	; 4
 6f6:	90 bd       	out	0x20, r25	; 32
 6f8:	9a b1       	in	r25, 0x0a	; 10
 6fa:	9b 7f       	andi	r25, 0xFB	; 251
 6fc:	9a b9       	out	0x0a, r25	; 10
 6fe:	08 95       	ret
 700:	90 b5       	in	r25, 0x20	; 32
 702:	92 60       	ori	r25, 0x02	; 2
 704:	90 bd       	out	0x20, r25	; 32
 706:	90 b5       	in	r25, 0x20	; 32
 708:	94 60       	ori	r25, 0x04	; 4
 70a:	90 bd       	out	0x20, r25	; 32
 70c:	9a b1       	in	r25, 0x0a	; 10
 70e:	9b 7f       	andi	r25, 0xFB	; 251
 710:	9a b9       	out	0x0a, r25	; 10
 712:	08 95       	ret
 714:	90 b5       	in	r25, 0x20	; 32
 716:	92 60       	ori	r25, 0x02	; 2
 718:	90 bd       	out	0x20, r25	; 32
 71a:	90 b5       	in	r25, 0x20	; 32
 71c:	94 60       	ori	r25, 0x04	; 4
 71e:	90 bd       	out	0x20, r25	; 32
 720:	9a b1       	in	r25, 0x0a	; 10
 722:	94 60       	ori	r25, 0x04	; 4
 724:	9a b9       	out	0x0a, r25	; 10
 726:	08 95       	ret
 728:	81 e0       	ldi	r24, 0x01	; 1
 72a:	08 95       	ret

0000072c <uart_RX_intEnable>:
 72c:	8a b1       	in	r24, 0x0a	; 10
 72e:	80 68       	ori	r24, 0x80	; 128
 730:	8a b9       	out	0x0a, r24	; 10
 732:	08 95       	ret

00000734 <__vector_13>:
 734:	1f 92       	push	r1
 736:	0f 92       	push	r0
 738:	0f b6       	in	r0, 0x3f	; 63
 73a:	0f 92       	push	r0
 73c:	11 24       	eor	r1, r1
 73e:	2f 93       	push	r18
 740:	3f 93       	push	r19
 742:	4f 93       	push	r20
 744:	5f 93       	push	r21
 746:	6f 93       	push	r22
 748:	7f 93       	push	r23
 74a:	8f 93       	push	r24
 74c:	9f 93       	push	r25
 74e:	af 93       	push	r26
 750:	bf 93       	push	r27
 752:	ef 93       	push	r30
 754:	ff 93       	push	r31
 756:	e0 91 96 00 	lds	r30, 0x0096	; 0x800096 <uart_RX_fptr>
 75a:	f0 91 97 00 	lds	r31, 0x0097	; 0x800097 <uart_RX_fptr+0x1>
 75e:	30 97       	sbiw	r30, 0x00	; 0
 760:	09 f0       	breq	.+2      	; 0x764 <__vector_13+0x30>
 762:	09 95       	icall
 764:	ff 91       	pop	r31
 766:	ef 91       	pop	r30
 768:	bf 91       	pop	r27
 76a:	af 91       	pop	r26
 76c:	9f 91       	pop	r25
 76e:	8f 91       	pop	r24
 770:	7f 91       	pop	r23
 772:	6f 91       	pop	r22
 774:	5f 91       	pop	r21
 776:	4f 91       	pop	r20
 778:	3f 91       	pop	r19
 77a:	2f 91       	pop	r18
 77c:	0f 90       	pop	r0
 77e:	0f be       	out	0x3f, r0	; 63
 780:	0f 90       	pop	r0
 782:	1f 90       	pop	r1
 784:	18 95       	reti

00000786 <uart_receive>:
 786:	8c b1       	in	r24, 0x0c	; 12
 788:	08 95       	ret

0000078a <uart_RX_SetCallBack>:
 78a:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <uart_RX_fptr+0x1>
 78e:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <uart_RX_fptr>
 792:	08 95       	ret

00000794 <__vector_15>:
 794:	1f 92       	push	r1
 796:	0f 92       	push	r0
 798:	0f b6       	in	r0, 0x3f	; 63
 79a:	0f 92       	push	r0
 79c:	11 24       	eor	r1, r1
 79e:	2f 93       	push	r18
 7a0:	3f 93       	push	r19
 7a2:	4f 93       	push	r20
 7a4:	5f 93       	push	r21
 7a6:	6f 93       	push	r22
 7a8:	7f 93       	push	r23
 7aa:	8f 93       	push	r24
 7ac:	9f 93       	push	r25
 7ae:	af 93       	push	r26
 7b0:	bf 93       	push	r27
 7b2:	ef 93       	push	r30
 7b4:	ff 93       	push	r31
 7b6:	e0 91 94 00 	lds	r30, 0x0094	; 0x800094 <uart_TX_fptr>
 7ba:	f0 91 95 00 	lds	r31, 0x0095	; 0x800095 <uart_TX_fptr+0x1>
 7be:	30 97       	sbiw	r30, 0x00	; 0
 7c0:	09 f0       	breq	.+2      	; 0x7c4 <__vector_15+0x30>
 7c2:	09 95       	icall
 7c4:	ff 91       	pop	r31
 7c6:	ef 91       	pop	r30
 7c8:	bf 91       	pop	r27
 7ca:	af 91       	pop	r26
 7cc:	9f 91       	pop	r25
 7ce:	8f 91       	pop	r24
 7d0:	7f 91       	pop	r23
 7d2:	6f 91       	pop	r22
 7d4:	5f 91       	pop	r21
 7d6:	4f 91       	pop	r20
 7d8:	3f 91       	pop	r19
 7da:	2f 91       	pop	r18
 7dc:	0f 90       	pop	r0
 7de:	0f be       	out	0x3f, r0	; 63
 7e0:	0f 90       	pop	r0
 7e2:	1f 90       	pop	r1
 7e4:	18 95       	reti

000007e6 <uart_TX_intEnable>:
 7e6:	8a b1       	in	r24, 0x0a	; 10
 7e8:	80 64       	ori	r24, 0x40	; 64
 7ea:	8a b9       	out	0x0a, r24	; 10
 7ec:	08 95       	ret

000007ee <uart_TX_SetCallBack>:
 7ee:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <uart_TX_fptr+0x1>
 7f2:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <uart_TX_fptr>
 7f6:	08 95       	ret

000007f8 <uart_transmit>:
 7f8:	8c b9       	out	0x0c, r24	; 12
 7fa:	08 95       	ret

000007fc <uart_TX_RX_interrupt_enable>:
 7fc:	0e 94 96 03 	call	0x72c	; 0x72c <uart_RX_intEnable>
 800:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <uart_TX_intEnable>
 804:	08 95       	ret

00000806 <bcm_init>:
			
			l_send_state_ = BCM_FAILD;
		}
		
	return l_send_state_;
}
 806:	cf 93       	push	r28
 808:	df 93       	push	r29
 80a:	00 97       	sbiw	r24, 0x00	; 0
 80c:	49 f0       	breq	.+18     	; 0x820 <bcm_init+0x1a>
 80e:	ec 01       	movw	r28, r24
 810:	e8 81       	ld	r30, Y
 812:	f9 81       	ldd	r31, Y+1	; 0x01
 814:	09 95       	icall
 816:	ea 81       	ldd	r30, Y+2	; 0x02
 818:	fb 81       	ldd	r31, Y+3	; 0x03
 81a:	09 95       	icall
 81c:	81 e0       	ldi	r24, 0x01	; 1
 81e:	01 c0       	rjmp	.+2      	; 0x822 <bcm_init+0x1c>
 820:	82 e0       	ldi	r24, 0x02	; 2
 822:	df 91       	pop	r29
 824:	cf 91       	pop	r28
 826:	08 95       	ret

00000828 <bcm_send_n>:
enu_bcm_send_state_t bcm_send_n( str_bcm_instance_t *ptr_bcm_instance_t ,uint8_t * ptr_buffer,uint8_t a_buffer_length){
	
		static enu_bcm_send_state_t l_sendState = FIRST_TIME_SENDING ;
		static uint8_t l_bufferNum = FIRST_BUFFER ;
		
	if(ptr_bcm_instance_t != NULL){
 828:	00 97       	sbiw	r24, 0x00	; 0
 82a:	09 f4       	brne	.+2      	; 0x82e <bcm_send_n+0x6>
 82c:	55 c0       	rjmp	.+170    	; 0x8d8 <__stack+0x79>
		
		if(ptr_bcm_instance_t->ptr_func_init== uart_init)
 82e:	fc 01       	movw	r30, r24
 830:	80 81       	ld	r24, Z
 832:	91 81       	ldd	r25, Z+1	; 0x01
 834:	82 5e       	subi	r24, 0xE2	; 226
 836:	92 40       	sbci	r25, 0x02	; 2
 838:	09 f0       	breq	.+2      	; 0x83c <bcm_send_n+0x14>
 83a:	51 c0       	rjmp	.+162    	; 0x8de <__stack+0x7f>
			{
				if (l_sendState == FIRST_TIME_SENDING && ptr_buffer != NULL)													// check if it is the first use to bcm_send_n
 83c:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <l_sendState.1807>
 840:	87 30       	cpi	r24, 0x07	; 7
 842:	f1 f4       	brne	.+60     	; 0x880 <__stack+0x21>
 844:	61 15       	cp	r22, r1
 846:	71 05       	cpc	r23, r1
 848:	d9 f0       	breq	.+54     	; 0x880 <__stack+0x21>
				{		
					str_sending_buffer->ptr_data_buffer[l_bufferNum] = ptr_buffer;												// saving buffer pointer in queue
 84a:	20 91 9d 00 	lds	r18, 0x009D	; 0x80009d <l_bufferNum.1808>
 84e:	82 2f       	mov	r24, r18
 850:	90 e0       	ldi	r25, 0x00	; 0
 852:	fc 01       	movw	r30, r24
 854:	ee 0f       	add	r30, r30
 856:	ff 1f       	adc	r31, r31
 858:	71 83       	std	Z+1, r23	; 0x01
 85a:	60 83       	st	Z, r22
					str_sending_buffer->u8_dataSize[l_bufferNum] = a_buffer_length ;											// saving buffer size in queue
 85c:	88 53       	subi	r24, 0x38	; 56
 85e:	9f 4f       	sbci	r25, 0xFF	; 255
 860:	fc 01       	movw	r30, r24
 862:	ee 0f       	add	r30, r30
 864:	ff 1f       	adc	r31, r31
 866:	50 e0       	ldi	r21, 0x00	; 0
 868:	51 83       	std	Z+1, r21	; 0x01
 86a:	40 83       	st	Z, r20
					gl_uart_state = TX_DONE ;																					// set uart send flag to tx done to make dispatcher start sending
 86c:	81 e0       	ldi	r24, 0x01	; 1
 86e:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <gl_uart_state>
					l_bufferNum++;																								// accessing the next pointer to save in it if we use this func again
 872:	2f 5f       	subi	r18, 0xFF	; 255
 874:	20 93 9d 00 	sts	0x009D, r18	; 0x80009d <l_bufferNum.1808>
					l_sendState = NOT_FIRST_TIME_SENDING ;																		// to enter the NOT_FIRST_TIME_SENDING state
 878:	88 e0       	ldi	r24, 0x08	; 8
 87a:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <l_sendState.1807>
 87e:	2f c0       	rjmp	.+94     	; 0x8de <__stack+0x7f>
					
				} 
				else if (l_sendState == NOT_FIRST_TIME_SENDING && ptr_buffer != NULL)											// check if it is not the first use to bcm_send_n
 880:	88 30       	cpi	r24, 0x08	; 8
 882:	e9 f4       	brne	.+58     	; 0x8be <__stack+0x5f>
 884:	61 15       	cp	r22, r1
 886:	71 05       	cpc	r23, r1
 888:	d1 f0       	breq	.+52     	; 0x8be <__stack+0x5f>
				{
					str_sending_buffer->ptr_data_buffer[l_bufferNum]= ptr_buffer;												// saving buffer pointer in queue
 88a:	e0 91 9d 00 	lds	r30, 0x009D	; 0x80009d <l_bufferNum.1808>
 88e:	8e 2f       	mov	r24, r30
 890:	90 e0       	ldi	r25, 0x00	; 0
 892:	dc 01       	movw	r26, r24
 894:	aa 0f       	add	r26, r26
 896:	bb 1f       	adc	r27, r27
 898:	6d 93       	st	X+, r22
 89a:	7c 93       	st	X, r23
					str_sending_buffer->u8_dataSize[l_bufferNum]=a_buffer_length;											    // saving buffer size in queue
 89c:	88 53       	subi	r24, 0x38	; 56
 89e:	9f 4f       	sbci	r25, 0xFF	; 255
 8a0:	dc 01       	movw	r26, r24
 8a2:	aa 0f       	add	r26, r26
 8a4:	bb 1f       	adc	r27, r27
 8a6:	50 e0       	ldi	r21, 0x00	; 0
 8a8:	4d 93       	st	X+, r20
 8aa:	5c 93       	st	X, r21
					l_bufferNum++;																								// accessing the next pointer to save in it if we use this func again
 8ac:	ef 5f       	subi	r30, 0xFF	; 255
 8ae:	e0 93 9d 00 	sts	0x009D, r30	; 0x80009d <l_bufferNum.1808>
					str_sending_buffer->ptr_data_buffer[l_bufferNum]=NULL;
 8b2:	f0 e0       	ldi	r31, 0x00	; 0
 8b4:	ee 0f       	add	r30, r30
 8b6:	ff 1f       	adc	r31, r31
 8b8:	11 82       	std	Z+1, r1	; 0x01
 8ba:	10 82       	st	Z, r1
 8bc:	10 c0       	rjmp	.+32     	; 0x8de <__stack+0x7f>
				}
				else if (ptr_buffer == NULL)																					
 8be:	67 2b       	or	r22, r23
 8c0:	71 f4       	brne	.+28     	; 0x8de <__stack+0x7f>
				{
					str_sending_buffer->ptr_data_buffer[l_bufferNum]=NULL;
 8c2:	e0 91 9d 00 	lds	r30, 0x009D	; 0x80009d <l_bufferNum.1808>
 8c6:	f0 e0       	ldi	r31, 0x00	; 0
 8c8:	ee 0f       	add	r30, r30
 8ca:	ff 1f       	adc	r31, r31
 8cc:	11 82       	std	Z+1, r1	; 0x01
 8ce:	10 82       	st	Z, r1
					l_sendState = SEND_FAILD_NULL_PTR;
 8d0:	89 e0       	ldi	r24, 0x09	; 9
 8d2:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <l_sendState.1807>
 8d6:	03 c0       	rjmp	.+6      	; 0x8de <__stack+0x7f>
				}	
			}
		}
		else 
		{	
			l_sendState = BCM_FAILD;
 8d8:	82 e0       	ldi	r24, 0x02	; 2
 8da:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <l_sendState.1807>
		
		return l_sendState;
	
	
	
}
 8de:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <l_sendState.1807>
 8e2:	08 95       	ret

000008e4 <bcm_disbatcher>:


enu_bcm_send_state_t bcm_disbatcher(str_bcm_instance_t *ptr_bcm_instance_t ,enu_bcm_first_use a_first_use)
{
 8e4:	cf 93       	push	r28
 8e6:	df 93       	push	r29
 8e8:	dc 01       	movw	r26, r24
	static enu_bcm_first_use l_first_use ;
	if(l_first_use != 0)																									// used to convert the state of the dispatcher between sending and receiving
 8ea:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <l_first_use.1813>
 8ee:	81 11       	cpse	r24, r1
 8f0:	02 c0       	rjmp	.+4      	; 0x8f6 <bcm_disbatcher+0x12>
	{
		a_first_use = l_first_use;
	}
	else
	{
		l_first_use =a_first_use;
 8f2:	60 93 9c 00 	sts	0x009C, r22	; 0x80009c <l_first_use.1813>
	}
	static uint8_t l_buffer_Num									= FIRST_BUFFER ;
	static uint8_t l_buffer_element								= FIRST_ELEMENT;
	static uint8_t l_rx_buffer_element							= FIRST_ELEMENT;
	static enu_bcm_send_state_t dispatcher_state				= IDLE ;
	 uint16 l_buffer_size										=str_sending_buffer->u8_dataSize[l_buffer_Num];
 8f6:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <l_buffer_Num.1814>
 8fa:	29 2f       	mov	r18, r25
 8fc:	30 e0       	ldi	r19, 0x00	; 0
 8fe:	f9 01       	movw	r30, r18
 900:	e8 53       	subi	r30, 0x38	; 56
 902:	ff 4f       	sbci	r31, 0xFF	; 255
 904:	ee 0f       	add	r30, r30
 906:	ff 1f       	adc	r31, r31
 908:	60 81       	ld	r22, Z
 90a:	71 81       	ldd	r23, Z+1	; 0x01
	
	if(ptr_bcm_instance_t->ptr_func_init == uart_init)																		// if we use uart
 90c:	4d 91       	ld	r20, X+
 90e:	5c 91       	ld	r21, X
 910:	42 5e       	subi	r20, 0xE2	; 226
 912:	52 40       	sbci	r21, 0x02	; 2
 914:	09 f0       	breq	.+2      	; 0x918 <bcm_disbatcher+0x34>
 916:	88 c0       	rjmp	.+272    	; 0xa28 <bcm_disbatcher+0x144>
	{
		if( l_first_use == SENDING_FIRST)																					// if app select to send first or we activities sending after receiving
 918:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <l_first_use.1813>
 91c:	81 30       	cpi	r24, 0x01	; 1
 91e:	09 f0       	breq	.+2      	; 0x922 <bcm_disbatcher+0x3e>
 920:	47 c0       	rjmp	.+142    	; 0x9b0 <bcm_disbatcher+0xcc>
		{
			if(gl_uart_state == TX_DONE )																					// if sending is done
 922:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <gl_uart_state>
 926:	81 30       	cpi	r24, 0x01	; 1
 928:	09 f0       	breq	.+2      	; 0x92c <bcm_disbatcher+0x48>
 92a:	7e c0       	rjmp	.+252    	; 0xa28 <bcm_disbatcher+0x144>
			{							
				if(l_buffer_element < l_buffer_size )																		// checking if we not send all buffer yet
 92c:	40 91 9a 00 	lds	r20, 0x009A	; 0x80009a <l_buffer_element.1815>
 930:	50 e0       	ldi	r21, 0x00	; 0
 932:	46 17       	cp	r20, r22
 934:	57 07       	cpc	r21, r23
 936:	d0 f4       	brcc	.+52     	; 0x96c <bcm_disbatcher+0x88>
				{	
					gl_uart_state								= READY ;                                                   // set flag that passed to isr to ready to let isr change it if tx completed
 938:	10 92 9f 00 	sts	0x009F, r1	; 0x80009f <gl_uart_state>
					uart_transmit(str_sending_buffer->ptr_data_buffer[l_buffer_Num][l_buffer_element]);						// sending buffer elements
 93c:	f9 01       	movw	r30, r18
 93e:	ee 0f       	add	r30, r30
 940:	ff 1f       	adc	r31, r31
 942:	80 81       	ld	r24, Z
 944:	91 81       	ldd	r25, Z+1	; 0x01
 946:	fc 01       	movw	r30, r24
 948:	e4 0f       	add	r30, r20
 94a:	f5 1f       	adc	r31, r21
 94c:	80 81       	ld	r24, Z
 94e:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <uart_transmit>
					uart_TX_SetCallBack(uart_isr_send_func);					
 952:	89 e1       	ldi	r24, 0x19	; 25
 954:	95 e0       	ldi	r25, 0x05	; 5
 956:	0e 94 f7 03 	call	0x7ee	; 0x7ee <uart_TX_SetCallBack>
					l_buffer_element++;
 95a:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <l_buffer_element.1815>
 95e:	8f 5f       	subi	r24, 0xFF	; 255
 960:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <l_buffer_element.1815>
					dispatcher_state							= SENDING ;													// state of dispatcher now is sending 
 964:	83 e0       	ldi	r24, 0x03	; 3
 966:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <dispatcher_state.1817>
 96a:	5e c0       	rjmp	.+188    	; 0xa28 <bcm_disbatcher+0x144>
			
				}
		
				else if ( l_buffer_element >= l_buffer_size )																// checking if we send all buffer 
 96c:	46 17       	cp	r20, r22
 96e:	57 07       	cpc	r21, r23
 970:	08 f4       	brcc	.+2      	; 0x974 <bcm_disbatcher+0x90>
 972:	5a c0       	rjmp	.+180    	; 0xa28 <bcm_disbatcher+0x144>
				{
			
					gl_uart_state								= READY ;													// set flag that passed to isr to ready to let isr change it if tx completed
 974:	10 92 9f 00 	sts	0x009F, r1	; 0x80009f <gl_uart_state>
					dispatcher_state							= BUFFER_SENT_OK ;											// state of dispatcher now is BUFFER_SENT_OK 
 978:	8a e0       	ldi	r24, 0x0A	; 10
 97a:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <dispatcher_state.1817>
					l_buffer_Num++;																							// accessing next buffer to send
 97e:	9f 5f       	subi	r25, 0xFF	; 255
 980:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <l_buffer_Num.1814>
					
					if (str_sending_buffer->ptr_data_buffer[l_buffer_Num] != NULL)											// checking if there is another buffer to send				
 984:	e9 2f       	mov	r30, r25
 986:	f0 e0       	ldi	r31, 0x00	; 0
 988:	ee 0f       	add	r30, r30
 98a:	ff 1f       	adc	r31, r31
 98c:	80 81       	ld	r24, Z
 98e:	91 81       	ldd	r25, Z+1	; 0x01
 990:	89 2b       	or	r24, r25
 992:	41 f0       	breq	.+16     	; 0x9a4 <bcm_disbatcher+0xc0>
					{
						
						gl_uart_state							= TX_DONE ;													// to let dispatcher send 
 994:	81 e0       	ldi	r24, 0x01	; 1
 996:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <gl_uart_state>
						l_buffer_element						= FIRST_ELEMENT;
 99a:	10 92 9a 00 	sts	0x009A, r1	; 0x80009a <l_buffer_element.1815>
						dispatcher_state						= IDLE ;
 99e:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <dispatcher_state.1817>
 9a2:	42 c0       	rjmp	.+132    	; 0xa28 <bcm_disbatcher+0x144>
					}
					else{																									// if there is no other buffer
						gl_uart_state								= READY ;
						l_buffer_element						= FIRST_ELEMENT;
 9a4:	10 92 9a 00 	sts	0x009A, r1	; 0x80009a <l_buffer_element.1815>
						l_first_use								= RECEVING_FIRST;											// activate receiving
 9a8:	82 e0       	ldi	r24, 0x02	; 2
 9aa:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <l_first_use.1813>
 9ae:	3c c0       	rjmp	.+120    	; 0xa28 <bcm_disbatcher+0x144>
					}
				}
			}
		}
		
		else if( l_first_use == RECEVING_FIRST)																			// if app select to send first or we activities sending after receiving 
 9b0:	82 30       	cpi	r24, 0x02	; 2
 9b2:	b9 f5       	brne	.+110    	; 0xa22 <bcm_disbatcher+0x13e>
		{
			
			uart_RX_SetCallBack(uart_isr_recieve_func);
 9b4:	8d e1       	ldi	r24, 0x1D	; 29
 9b6:	95 e0       	ldi	r25, 0x05	; 5
 9b8:	0e 94 c5 03 	call	0x78a	; 0x78a <uart_RX_SetCallBack>
			if (gl_uart_state2 == RX_DONE)																				// if there is data to read 
 9bc:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <gl_uart_state2>
 9c0:	82 30       	cpi	r24, 0x02	; 2
 9c2:	91 f5       	brne	.+100    	; 0xa28 <bcm_disbatcher+0x144>
			{
		
				str_receving_buffer->ptr_dataBASE[l_rx_buffer_element] = uart_receive();                                // saving data in array
 9c4:	c0 91 98 00 	lds	r28, 0x0098	; 0x800098 <l_rx_buffer_element.1816>
 9c8:	d0 e0       	ldi	r29, 0x00	; 0
 9ca:	0e 94 c3 03 	call	0x786	; 0x786 <uart_receive>
 9ce:	c0 5e       	subi	r28, 0xE0	; 224
 9d0:	dc 4f       	sbci	r29, 0xFC	; 252
 9d2:	88 83       	st	Y, r24
				
				if(str_receving_buffer->ptr_dataBASE[l_buffer_element] != NULL)
 9d4:	e0 91 9a 00 	lds	r30, 0x009A	; 0x80009a <l_buffer_element.1815>
 9d8:	f0 e0       	ldi	r31, 0x00	; 0
 9da:	e0 5e       	subi	r30, 0xE0	; 224
 9dc:	fc 4f       	sbci	r31, 0xFC	; 252
 9de:	80 81       	ld	r24, Z
 9e0:	88 23       	and	r24, r24
 9e2:	11 f1       	breq	.+68     	; 0xa28 <bcm_disbatcher+0x144>
				{	
					if(str_receving_buffer->ptr_dataBASE[l_rx_buffer_element]  == '&')									// if we receive the acknowledge of sending is done 
 9e4:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <l_rx_buffer_element.1816>
 9e8:	e8 2f       	mov	r30, r24
 9ea:	f0 e0       	ldi	r31, 0x00	; 0
 9ec:	e0 5e       	subi	r30, 0xE0	; 224
 9ee:	fc 4f       	sbci	r31, 0xFC	; 252
 9f0:	90 81       	ld	r25, Z
 9f2:	96 32       	cpi	r25, 0x26	; 38
 9f4:	69 f4       	brne	.+26     	; 0xa10 <bcm_disbatcher+0x12c>
					{
						l_rx_buffer_element							=FIRST_ELEMENT;
 9f6:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <l_rx_buffer_element.1816>
						l_first_use									= SENDING_FIRST;									// activate sending again
 9fa:	81 e0       	ldi	r24, 0x01	; 1
 9fc:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <l_first_use.1813>
						gl_uart_state								= TX_DONE;
 a00:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <gl_uart_state>
						dispatcher_state							= BUFFER_RECEIVED_OK;								// state of dispatcher now is BUFFER_RECEIVED_OK 
 a04:	8b e0       	ldi	r24, 0x0B	; 11
 a06:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <dispatcher_state.1817>
						gl_uart_state2								= READY;
 a0a:	10 92 9e 00 	sts	0x009E, r1	; 0x80009e <gl_uart_state2>
 a0e:	0c c0       	rjmp	.+24     	; 0xa28 <bcm_disbatcher+0x144>
					}
					else
					{	
						dispatcher_state							= RECEVING;											// state of dispatcher now is BUFFER_RECEIVED_OK
 a10:	94 e0       	ldi	r25, 0x04	; 4
 a12:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <dispatcher_state.1817>
						l_rx_buffer_element++;
 a16:	8f 5f       	subi	r24, 0xFF	; 255
 a18:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <l_rx_buffer_element.1816>
						gl_uart_state2								= READY;
 a1c:	10 92 9e 00 	sts	0x009E, r1	; 0x80009e <gl_uart_state2>
 a20:	03 c0       	rjmp	.+6      	; 0xa28 <bcm_disbatcher+0x144>
		}
		
		else
		{

			dispatcher_state									 = INVALID_STATE;
 a22:	81 e0       	ldi	r24, 0x01	; 1
 a24:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <dispatcher_state.1817>
		}
		
	}
	return dispatcher_state ;
 a28:	80 91 99 00 	lds	r24, 0x0099	; 0x800099 <dispatcher_state.1817>
 a2c:	df 91       	pop	r29
 a2e:	cf 91       	pop	r28
 a30:	08 95       	ret

00000a32 <uart_isr_send_func>:

//--------------------------- UART INTERRUPT HANDLING -------------------- //

void uart_isr_send_func (void){

	gl_uart_state = TX_DONE ;
 a32:	81 e0       	ldi	r24, 0x01	; 1
 a34:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <gl_uart_state>
 a38:	08 95       	ret

00000a3a <uart_isr_recieve_func>:
}

void uart_isr_recieve_func (void){
	

	gl_uart_state2 = RX_DONE ;
 a3a:	82 e0       	ldi	r24, 0x02	; 2
 a3c:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <gl_uart_state2>
 a40:	08 95       	ret

00000a42 <_exit>:
 a42:	f8 94       	cli

00000a44 <__stop_program>:
 a44:	ff cf       	rjmp	.-2      	; 0xa44 <__stop_program>
